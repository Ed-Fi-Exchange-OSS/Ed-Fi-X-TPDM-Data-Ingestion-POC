/**
 * Ed-Fi Operational Data Store API
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.edfi.model.resource;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.edfi.model.resource.EdFiAssessmentReference;
import org.edfi.model.resource.EdFiSchoolYearTypeReference;
import org.edfi.model.resource.EdFiStudentAssessmentAccommodation;
import org.edfi.model.resource.EdFiStudentAssessmentItem;
import org.edfi.model.resource.EdFiStudentAssessmentPerformanceLevel;
import org.edfi.model.resource.EdFiStudentAssessmentScoreResult;
import org.edfi.model.resource.EdFiStudentAssessmentStudentObjectiveAssessment;
import org.edfi.model.resource.EdFiStudentReference;
import org.joda.time.DateTime;


/**
 * EdFiStudentAssessment
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-09T12:36:29.493-07:00")
public class EdFiStudentAssessment   {
  @SerializedName("id")
  private String id = null;

  @SerializedName("studentAssessmentIdentifier")
  private String studentAssessmentIdentifier = null;

  @SerializedName("assessmentReference")
  private EdFiAssessmentReference assessmentReference = null;

  @SerializedName("schoolYearTypeReference")
  private EdFiSchoolYearTypeReference schoolYearTypeReference = null;

  @SerializedName("studentReference")
  private EdFiStudentReference studentReference = null;

  @SerializedName("accommodations")
  private List<EdFiStudentAssessmentAccommodation> accommodations = new ArrayList<EdFiStudentAssessmentAccommodation>();

  @SerializedName("administrationDate")
  private DateTime administrationDate = null;

  @SerializedName("administrationEndDate")
  private DateTime administrationEndDate = null;

  @SerializedName("administrationEnvironmentDescriptor")
  private String administrationEnvironmentDescriptor = null;

  @SerializedName("administrationLanguageDescriptor")
  private String administrationLanguageDescriptor = null;

  @SerializedName("eventCircumstanceDescriptor")
  private String eventCircumstanceDescriptor = null;

  @SerializedName("eventDescription")
  private String eventDescription = null;

  @SerializedName("items")
  private List<EdFiStudentAssessmentItem> items = new ArrayList<EdFiStudentAssessmentItem>();

  @SerializedName("performanceLevels")
  private List<EdFiStudentAssessmentPerformanceLevel> performanceLevels = new ArrayList<EdFiStudentAssessmentPerformanceLevel>();

  @SerializedName("reasonNotTestedDescriptor")
  private String reasonNotTestedDescriptor = null;

  @SerializedName("retestIndicatorDescriptor")
  private String retestIndicatorDescriptor = null;

  @SerializedName("scoreResults")
  private List<EdFiStudentAssessmentScoreResult> scoreResults = new ArrayList<EdFiStudentAssessmentScoreResult>();

  @SerializedName("serialNumber")
  private String serialNumber = null;

  @SerializedName("studentObjectiveAssessments")
  private List<EdFiStudentAssessmentStudentObjectiveAssessment> studentObjectiveAssessments = new ArrayList<EdFiStudentAssessmentStudentObjectiveAssessment>();

  @SerializedName("whenAssessedGradeLevelDescriptor")
  private String whenAssessedGradeLevelDescriptor = null;

  @SerializedName("_etag")
  private String etag = null;

  public EdFiStudentAssessment id(String id) {
    this.id = id;
    return this;
  }

   /**
   * 
   * @return id
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public EdFiStudentAssessment studentAssessmentIdentifier(String studentAssessmentIdentifier) {
    this.studentAssessmentIdentifier = studentAssessmentIdentifier;
    return this;
  }

   /**
   * A unique number or alphanumeric code assigned to an assessment administered to a student.
   * @return studentAssessmentIdentifier
  **/
  @ApiModelProperty(example = "null", required = true, value = "A unique number or alphanumeric code assigned to an assessment administered to a student.")
  public String getStudentAssessmentIdentifier() {
    return studentAssessmentIdentifier;
  }

  public void setStudentAssessmentIdentifier(String studentAssessmentIdentifier) {
    this.studentAssessmentIdentifier = studentAssessmentIdentifier;
  }

  public EdFiStudentAssessment assessmentReference(EdFiAssessmentReference assessmentReference) {
    this.assessmentReference = assessmentReference;
    return this;
  }

   /**
   * Get assessmentReference
   * @return assessmentReference
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public EdFiAssessmentReference getAssessmentReference() {
    return assessmentReference;
  }

  public void setAssessmentReference(EdFiAssessmentReference assessmentReference) {
    this.assessmentReference = assessmentReference;
  }

  public EdFiStudentAssessment schoolYearTypeReference(EdFiSchoolYearTypeReference schoolYearTypeReference) {
    this.schoolYearTypeReference = schoolYearTypeReference;
    return this;
  }

   /**
   * Get schoolYearTypeReference
   * @return schoolYearTypeReference
  **/
  @ApiModelProperty(example = "null", value = "")
  public EdFiSchoolYearTypeReference getSchoolYearTypeReference() {
    return schoolYearTypeReference;
  }

  public void setSchoolYearTypeReference(EdFiSchoolYearTypeReference schoolYearTypeReference) {
    this.schoolYearTypeReference = schoolYearTypeReference;
  }

  public EdFiStudentAssessment studentReference(EdFiStudentReference studentReference) {
    this.studentReference = studentReference;
    return this;
  }

   /**
   * Get studentReference
   * @return studentReference
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public EdFiStudentReference getStudentReference() {
    return studentReference;
  }

  public void setStudentReference(EdFiStudentReference studentReference) {
    this.studentReference = studentReference;
  }

  public EdFiStudentAssessment accommodations(List<EdFiStudentAssessmentAccommodation> accommodations) {
    this.accommodations = accommodations;
    return this;
  }

  public EdFiStudentAssessment addAccommodationsItem(EdFiStudentAssessmentAccommodation accommodationsItem) {
    this.accommodations.add(accommodationsItem);
    return this;
  }

   /**
   * An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:          Braille          Enlarged monitor view          Extra time          Large Print          Setting          Oral Administration          ...
   * @return accommodations
  **/
  @ApiModelProperty(example = "null", value = "An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:          Braille          Enlarged monitor view          Extra time          Large Print          Setting          Oral Administration          ...")
  public List<EdFiStudentAssessmentAccommodation> getAccommodations() {
    return accommodations;
  }

  public void setAccommodations(List<EdFiStudentAssessmentAccommodation> accommodations) {
    this.accommodations = accommodations;
  }

  public EdFiStudentAssessment administrationDate(DateTime administrationDate) {
    this.administrationDate = administrationDate;
    return this;
  }

   /**
   * The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.
   * @return administrationDate
  **/
  @ApiModelProperty(example = "null", required = true, value = "The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.")
  public DateTime getAdministrationDate() {
    return administrationDate;
  }

  public void setAdministrationDate(DateTime administrationDate) {
    this.administrationDate = administrationDate;
  }

  public EdFiStudentAssessment administrationEndDate(DateTime administrationEndDate) {
    this.administrationEndDate = administrationEndDate;
    return this;
  }

   /**
   * The date and time an assessment administration ended.
   * @return administrationEndDate
  **/
  @ApiModelProperty(example = "null", value = "The date and time an assessment administration ended.")
  public DateTime getAdministrationEndDate() {
    return administrationEndDate;
  }

  public void setAdministrationEndDate(DateTime administrationEndDate) {
    this.administrationEndDate = administrationEndDate;
  }

  public EdFiStudentAssessment administrationEnvironmentDescriptor(String administrationEnvironmentDescriptor) {
    this.administrationEnvironmentDescriptor = administrationEnvironmentDescriptor;
    return this;
  }

   /**
   * The environment in which the test was administered. For example:          Electronic          Classroom          Testing Center          ...
   * @return administrationEnvironmentDescriptor
  **/
  @ApiModelProperty(example = "null", value = "The environment in which the test was administered. For example:          Electronic          Classroom          Testing Center          ...")
  public String getAdministrationEnvironmentDescriptor() {
    return administrationEnvironmentDescriptor;
  }

  public void setAdministrationEnvironmentDescriptor(String administrationEnvironmentDescriptor) {
    this.administrationEnvironmentDescriptor = administrationEnvironmentDescriptor;
  }

  public EdFiStudentAssessment administrationLanguageDescriptor(String administrationLanguageDescriptor) {
    this.administrationLanguageDescriptor = administrationLanguageDescriptor;
    return this;
  }

   /**
   * The language in which an assessment is written and/or administered.
   * @return administrationLanguageDescriptor
  **/
  @ApiModelProperty(example = "null", value = "The language in which an assessment is written and/or administered.")
  public String getAdministrationLanguageDescriptor() {
    return administrationLanguageDescriptor;
  }

  public void setAdministrationLanguageDescriptor(String administrationLanguageDescriptor) {
    this.administrationLanguageDescriptor = administrationLanguageDescriptor;
  }

  public EdFiStudentAssessment eventCircumstanceDescriptor(String eventCircumstanceDescriptor) {
    this.eventCircumstanceDescriptor = eventCircumstanceDescriptor;
    return this;
  }

   /**
   * An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.
   * @return eventCircumstanceDescriptor
  **/
  @ApiModelProperty(example = "null", value = "An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.")
  public String getEventCircumstanceDescriptor() {
    return eventCircumstanceDescriptor;
  }

  public void setEventCircumstanceDescriptor(String eventCircumstanceDescriptor) {
    this.eventCircumstanceDescriptor = eventCircumstanceDescriptor;
  }

  public EdFiStudentAssessment eventDescription(String eventDescription) {
    this.eventDescription = eventDescription;
    return this;
  }

   /**
   * Describes special events that occur before during or after the assessment session that may impact use of results.
   * @return eventDescription
  **/
  @ApiModelProperty(example = "null", value = "Describes special events that occur before during or after the assessment session that may impact use of results.")
  public String getEventDescription() {
    return eventDescription;
  }

  public void setEventDescription(String eventDescription) {
    this.eventDescription = eventDescription;
  }

  public EdFiStudentAssessment items(List<EdFiStudentAssessmentItem> items) {
    this.items = items;
    return this;
  }

  public EdFiStudentAssessment addItemsItem(EdFiStudentAssessmentItem itemsItem) {
    this.items.add(itemsItem);
    return this;
  }

   /**
   * An unordered collection of studentAssessmentItems. The student's response to an assessment item and the item-level scores such as correct, incorrect, or met standard.
   * @return items
  **/
  @ApiModelProperty(example = "null", value = "An unordered collection of studentAssessmentItems. The student's response to an assessment item and the item-level scores such as correct, incorrect, or met standard.")
  public List<EdFiStudentAssessmentItem> getItems() {
    return items;
  }

  public void setItems(List<EdFiStudentAssessmentItem> items) {
    this.items = items;
  }

  public EdFiStudentAssessment performanceLevels(List<EdFiStudentAssessmentPerformanceLevel> performanceLevels) {
    this.performanceLevels = performanceLevels;
    return this;
  }

  public EdFiStudentAssessment addPerformanceLevelsItem(EdFiStudentAssessmentPerformanceLevel performanceLevelsItem) {
    this.performanceLevels.add(performanceLevelsItem);
    return this;
  }

   /**
   * An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the StudentAssessment.
   * @return performanceLevels
  **/
  @ApiModelProperty(example = "null", value = "An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the StudentAssessment.")
  public List<EdFiStudentAssessmentPerformanceLevel> getPerformanceLevels() {
    return performanceLevels;
  }

  public void setPerformanceLevels(List<EdFiStudentAssessmentPerformanceLevel> performanceLevels) {
    this.performanceLevels = performanceLevels;
  }

  public EdFiStudentAssessment reasonNotTestedDescriptor(String reasonNotTestedDescriptor) {
    this.reasonNotTestedDescriptor = reasonNotTestedDescriptor;
    return this;
  }

   /**
   * The primary reason student is not tested. For example:          Absent          Refusal by parent          Refusal by student          Medical waiver          Illness          Disruptive behavior          LEP Exempt          ...
   * @return reasonNotTestedDescriptor
  **/
  @ApiModelProperty(example = "null", value = "The primary reason student is not tested. For example:          Absent          Refusal by parent          Refusal by student          Medical waiver          Illness          Disruptive behavior          LEP Exempt          ...")
  public String getReasonNotTestedDescriptor() {
    return reasonNotTestedDescriptor;
  }

  public void setReasonNotTestedDescriptor(String reasonNotTestedDescriptor) {
    this.reasonNotTestedDescriptor = reasonNotTestedDescriptor;
  }

  public EdFiStudentAssessment retestIndicatorDescriptor(String retestIndicatorDescriptor) {
    this.retestIndicatorDescriptor = retestIndicatorDescriptor;
    return this;
  }

   /**
   * Indicator if the test was retaken. For example:          Primary administration          First retest          Second retest          ...
   * @return retestIndicatorDescriptor
  **/
  @ApiModelProperty(example = "null", value = "Indicator if the test was retaken. For example:          Primary administration          First retest          Second retest          ...")
  public String getRetestIndicatorDescriptor() {
    return retestIndicatorDescriptor;
  }

  public void setRetestIndicatorDescriptor(String retestIndicatorDescriptor) {
    this.retestIndicatorDescriptor = retestIndicatorDescriptor;
  }

  public EdFiStudentAssessment scoreResults(List<EdFiStudentAssessmentScoreResult> scoreResults) {
    this.scoreResults = scoreResults;
    return this;
  }

  public EdFiStudentAssessment addScoreResultsItem(EdFiStudentAssessmentScoreResult scoreResultsItem) {
    this.scoreResults.add(scoreResultsItem);
    return this;
  }

   /**
   * An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
   * @return scoreResults
  **/
  @ApiModelProperty(example = "null", value = "An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.")
  public List<EdFiStudentAssessmentScoreResult> getScoreResults() {
    return scoreResults;
  }

  public void setScoreResults(List<EdFiStudentAssessmentScoreResult> scoreResults) {
    this.scoreResults = scoreResults;
  }

  public EdFiStudentAssessment serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * The unique number for the assessment form or answer document.
   * @return serialNumber
  **/
  @ApiModelProperty(example = "null", value = "The unique number for the assessment form or answer document.")
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }

  public EdFiStudentAssessment studentObjectiveAssessments(List<EdFiStudentAssessmentStudentObjectiveAssessment> studentObjectiveAssessments) {
    this.studentObjectiveAssessments = studentObjectiveAssessments;
    return this;
  }

  public EdFiStudentAssessment addStudentObjectiveAssessmentsItem(EdFiStudentAssessmentStudentObjectiveAssessment studentObjectiveAssessmentsItem) {
    this.studentObjectiveAssessments.add(studentObjectiveAssessmentsItem);
    return this;
  }

   /**
   * An unordered collection of studentAssessmentStudentObjectiveAssessments. The student's score and/or performance levels earned for an ObjectiveAssessment.
   * @return studentObjectiveAssessments
  **/
  @ApiModelProperty(example = "null", value = "An unordered collection of studentAssessmentStudentObjectiveAssessments. The student's score and/or performance levels earned for an ObjectiveAssessment.")
  public List<EdFiStudentAssessmentStudentObjectiveAssessment> getStudentObjectiveAssessments() {
    return studentObjectiveAssessments;
  }

  public void setStudentObjectiveAssessments(List<EdFiStudentAssessmentStudentObjectiveAssessment> studentObjectiveAssessments) {
    this.studentObjectiveAssessments = studentObjectiveAssessments;
  }

  public EdFiStudentAssessment whenAssessedGradeLevelDescriptor(String whenAssessedGradeLevelDescriptor) {
    this.whenAssessedGradeLevelDescriptor = whenAssessedGradeLevelDescriptor;
    return this;
  }

   /**
   * The grade level of a student when assessed.
   * @return whenAssessedGradeLevelDescriptor
  **/
  @ApiModelProperty(example = "null", value = "The grade level of a student when assessed.")
  public String getWhenAssessedGradeLevelDescriptor() {
    return whenAssessedGradeLevelDescriptor;
  }

  public void setWhenAssessedGradeLevelDescriptor(String whenAssessedGradeLevelDescriptor) {
    this.whenAssessedGradeLevelDescriptor = whenAssessedGradeLevelDescriptor;
  }

  public EdFiStudentAssessment etag(String etag) {
    this.etag = etag;
    return this;
  }

   /**
   * A unique system-generated value that identifies the version of the resource.
   * @return etag
  **/
  @ApiModelProperty(example = "null", value = "A unique system-generated value that identifies the version of the resource.")
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EdFiStudentAssessment edFiStudentAssessment = (EdFiStudentAssessment) o;
    return Objects.equals(this.id, edFiStudentAssessment.id) &&
        Objects.equals(this.studentAssessmentIdentifier, edFiStudentAssessment.studentAssessmentIdentifier) &&
        Objects.equals(this.assessmentReference, edFiStudentAssessment.assessmentReference) &&
        Objects.equals(this.schoolYearTypeReference, edFiStudentAssessment.schoolYearTypeReference) &&
        Objects.equals(this.studentReference, edFiStudentAssessment.studentReference) &&
        Objects.equals(this.accommodations, edFiStudentAssessment.accommodations) &&
        Objects.equals(this.administrationDate, edFiStudentAssessment.administrationDate) &&
        Objects.equals(this.administrationEndDate, edFiStudentAssessment.administrationEndDate) &&
        Objects.equals(this.administrationEnvironmentDescriptor, edFiStudentAssessment.administrationEnvironmentDescriptor) &&
        Objects.equals(this.administrationLanguageDescriptor, edFiStudentAssessment.administrationLanguageDescriptor) &&
        Objects.equals(this.eventCircumstanceDescriptor, edFiStudentAssessment.eventCircumstanceDescriptor) &&
        Objects.equals(this.eventDescription, edFiStudentAssessment.eventDescription) &&
        Objects.equals(this.items, edFiStudentAssessment.items) &&
        Objects.equals(this.performanceLevels, edFiStudentAssessment.performanceLevels) &&
        Objects.equals(this.reasonNotTestedDescriptor, edFiStudentAssessment.reasonNotTestedDescriptor) &&
        Objects.equals(this.retestIndicatorDescriptor, edFiStudentAssessment.retestIndicatorDescriptor) &&
        Objects.equals(this.scoreResults, edFiStudentAssessment.scoreResults) &&
        Objects.equals(this.serialNumber, edFiStudentAssessment.serialNumber) &&
        Objects.equals(this.studentObjectiveAssessments, edFiStudentAssessment.studentObjectiveAssessments) &&
        Objects.equals(this.whenAssessedGradeLevelDescriptor, edFiStudentAssessment.whenAssessedGradeLevelDescriptor) &&
        Objects.equals(this.etag, edFiStudentAssessment.etag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, studentAssessmentIdentifier, assessmentReference, schoolYearTypeReference, studentReference, accommodations, administrationDate, administrationEndDate, administrationEnvironmentDescriptor, administrationLanguageDescriptor, eventCircumstanceDescriptor, eventDescription, items, performanceLevels, reasonNotTestedDescriptor, retestIndicatorDescriptor, scoreResults, serialNumber, studentObjectiveAssessments, whenAssessedGradeLevelDescriptor, etag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EdFiStudentAssessment {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    studentAssessmentIdentifier: ").append(toIndentedString(studentAssessmentIdentifier)).append("\n");
    sb.append("    assessmentReference: ").append(toIndentedString(assessmentReference)).append("\n");
    sb.append("    schoolYearTypeReference: ").append(toIndentedString(schoolYearTypeReference)).append("\n");
    sb.append("    studentReference: ").append(toIndentedString(studentReference)).append("\n");
    sb.append("    accommodations: ").append(toIndentedString(accommodations)).append("\n");
    sb.append("    administrationDate: ").append(toIndentedString(administrationDate)).append("\n");
    sb.append("    administrationEndDate: ").append(toIndentedString(administrationEndDate)).append("\n");
    sb.append("    administrationEnvironmentDescriptor: ").append(toIndentedString(administrationEnvironmentDescriptor)).append("\n");
    sb.append("    administrationLanguageDescriptor: ").append(toIndentedString(administrationLanguageDescriptor)).append("\n");
    sb.append("    eventCircumstanceDescriptor: ").append(toIndentedString(eventCircumstanceDescriptor)).append("\n");
    sb.append("    eventDescription: ").append(toIndentedString(eventDescription)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    performanceLevels: ").append(toIndentedString(performanceLevels)).append("\n");
    sb.append("    reasonNotTestedDescriptor: ").append(toIndentedString(reasonNotTestedDescriptor)).append("\n");
    sb.append("    retestIndicatorDescriptor: ").append(toIndentedString(retestIndicatorDescriptor)).append("\n");
    sb.append("    scoreResults: ").append(toIndentedString(scoreResults)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    studentObjectiveAssessments: ").append(toIndentedString(studentObjectiveAssessments)).append("\n");
    sb.append("    whenAssessedGradeLevelDescriptor: ").append(toIndentedString(whenAssessedGradeLevelDescriptor)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

