/**
 * Ed-Fi Operational Data Store API
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.edfi.model.resource;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.edfi.model.resource.EdFiCourseCompetencyLevel;
import org.edfi.model.resource.EdFiCourseIdentificationCode;
import org.edfi.model.resource.EdFiCourseLearningObjective;
import org.edfi.model.resource.EdFiCourseLearningStandard;
import org.edfi.model.resource.EdFiCourseLevelCharacteristic;
import org.edfi.model.resource.EdFiCourseOfferedGradeLevel;
import org.edfi.model.resource.EdFiEducationOrganizationReference;
import org.joda.time.LocalDate;


/**
 * EdFiCourse
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-09T12:36:29.493-07:00")
public class EdFiCourse   {
  @SerializedName("id")
  private String id = null;

  @SerializedName("courseCode")
  private String courseCode = null;

  @SerializedName("identificationCodes")
  private List<EdFiCourseIdentificationCode> identificationCodes = new ArrayList<EdFiCourseIdentificationCode>();

  @SerializedName("educationOrganizationReference")
  private EdFiEducationOrganizationReference educationOrganizationReference = null;

  @SerializedName("academicSubjectDescriptor")
  private String academicSubjectDescriptor = null;

  @SerializedName("careerPathwayDescriptor")
  private String careerPathwayDescriptor = null;

  @SerializedName("competencyLevels")
  private List<EdFiCourseCompetencyLevel> competencyLevels = new ArrayList<EdFiCourseCompetencyLevel>();

  @SerializedName("courseDefinedByDescriptor")
  private String courseDefinedByDescriptor = null;

  @SerializedName("courseDescription")
  private String courseDescription = null;

  @SerializedName("courseGPAApplicabilityDescriptor")
  private String courseGPAApplicabilityDescriptor = null;

  @SerializedName("courseTitle")
  private String courseTitle = null;

  @SerializedName("dateCourseAdopted")
  private LocalDate dateCourseAdopted = null;

  @SerializedName("highSchoolCourseRequirement")
  private Boolean highSchoolCourseRequirement = null;

  @SerializedName("learningObjectives")
  private List<EdFiCourseLearningObjective> learningObjectives = new ArrayList<EdFiCourseLearningObjective>();

  @SerializedName("learningStandards")
  private List<EdFiCourseLearningStandard> learningStandards = new ArrayList<EdFiCourseLearningStandard>();

  @SerializedName("levelCharacteristics")
  private List<EdFiCourseLevelCharacteristic> levelCharacteristics = new ArrayList<EdFiCourseLevelCharacteristic>();

  @SerializedName("maxCompletionsForCredit")
  private Integer maxCompletionsForCredit = null;

  @SerializedName("maximumAvailableCreditConversion")
  private Double maximumAvailableCreditConversion = null;

  @SerializedName("maximumAvailableCredits")
  private Double maximumAvailableCredits = null;

  @SerializedName("maximumAvailableCreditTypeDescriptor")
  private String maximumAvailableCreditTypeDescriptor = null;

  @SerializedName("minimumAvailableCreditConversion")
  private Double minimumAvailableCreditConversion = null;

  @SerializedName("minimumAvailableCredits")
  private Double minimumAvailableCredits = null;

  @SerializedName("minimumAvailableCreditTypeDescriptor")
  private String minimumAvailableCreditTypeDescriptor = null;

  @SerializedName("numberOfParts")
  private Integer numberOfParts = null;

  @SerializedName("offeredGradeLevels")
  private List<EdFiCourseOfferedGradeLevel> offeredGradeLevels = new ArrayList<EdFiCourseOfferedGradeLevel>();

  @SerializedName("timeRequiredForCompletion")
  private Integer timeRequiredForCompletion = null;

  @SerializedName("_etag")
  private String etag = null;

  public EdFiCourse id(String id) {
    this.id = id;
    return this;
  }

   /**
   * 
   * @return id
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public EdFiCourse courseCode(String courseCode) {
    this.courseCode = courseCode;
    return this;
  }

   /**
   * A unique alphanumeric code assigned to a course.
   * @return courseCode
  **/
  @ApiModelProperty(example = "null", required = true, value = "A unique alphanumeric code assigned to a course.")
  public String getCourseCode() {
    return courseCode;
  }

  public void setCourseCode(String courseCode) {
    this.courseCode = courseCode;
  }

  public EdFiCourse identificationCodes(List<EdFiCourseIdentificationCode> identificationCodes) {
    this.identificationCodes = identificationCodes;
    return this;
  }

  public EdFiCourse addIdentificationCodesItem(EdFiCourseIdentificationCode identificationCodesItem) {
    this.identificationCodes.add(identificationCodesItem);
    return this;
  }

   /**
   * An unordered collection of courseIdentificationCodes. The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.
   * @return identificationCodes
  **/
  @ApiModelProperty(example = "null", required = true, value = "An unordered collection of courseIdentificationCodes. The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.")
  public List<EdFiCourseIdentificationCode> getIdentificationCodes() {
    return identificationCodes;
  }

  public void setIdentificationCodes(List<EdFiCourseIdentificationCode> identificationCodes) {
    this.identificationCodes = identificationCodes;
  }

  public EdFiCourse educationOrganizationReference(EdFiEducationOrganizationReference educationOrganizationReference) {
    this.educationOrganizationReference = educationOrganizationReference;
    return this;
  }

   /**
   * Get educationOrganizationReference
   * @return educationOrganizationReference
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public EdFiEducationOrganizationReference getEducationOrganizationReference() {
    return educationOrganizationReference;
  }

  public void setEducationOrganizationReference(EdFiEducationOrganizationReference educationOrganizationReference) {
    this.educationOrganizationReference = educationOrganizationReference;
  }

  public EdFiCourse academicSubjectDescriptor(String academicSubjectDescriptor) {
    this.academicSubjectDescriptor = academicSubjectDescriptor;
    return this;
  }

   /**
   * The intended major subject area of the course.
   * @return academicSubjectDescriptor
  **/
  @ApiModelProperty(example = "null", value = "The intended major subject area of the course.")
  public String getAcademicSubjectDescriptor() {
    return academicSubjectDescriptor;
  }

  public void setAcademicSubjectDescriptor(String academicSubjectDescriptor) {
    this.academicSubjectDescriptor = academicSubjectDescriptor;
  }

  public EdFiCourse careerPathwayDescriptor(String careerPathwayDescriptor) {
    this.careerPathwayDescriptor = careerPathwayDescriptor;
    return this;
  }

   /**
   * Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.
   * @return careerPathwayDescriptor
  **/
  @ApiModelProperty(example = "null", value = "Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.")
  public String getCareerPathwayDescriptor() {
    return careerPathwayDescriptor;
  }

  public void setCareerPathwayDescriptor(String careerPathwayDescriptor) {
    this.careerPathwayDescriptor = careerPathwayDescriptor;
  }

  public EdFiCourse competencyLevels(List<EdFiCourseCompetencyLevel> competencyLevels) {
    this.competencyLevels = competencyLevels;
    return this;
  }

  public EdFiCourse addCompetencyLevelsItem(EdFiCourseCompetencyLevel competencyLevelsItem) {
    this.competencyLevels.add(competencyLevelsItem);
    return this;
  }

   /**
   * An unordered collection of courseCompetencyLevels. The competency levels defined to rate the student for the course.
   * @return competencyLevels
  **/
  @ApiModelProperty(example = "null", value = "An unordered collection of courseCompetencyLevels. The competency levels defined to rate the student for the course.")
  public List<EdFiCourseCompetencyLevel> getCompetencyLevels() {
    return competencyLevels;
  }

  public void setCompetencyLevels(List<EdFiCourseCompetencyLevel> competencyLevels) {
    this.competencyLevels = competencyLevels;
  }

  public EdFiCourse courseDefinedByDescriptor(String courseDefinedByDescriptor) {
    this.courseDefinedByDescriptor = courseDefinedByDescriptor;
    return this;
  }

   /**
   * Specifies whether the course was defined by the SEA, LEA, School, or national organization.
   * @return courseDefinedByDescriptor
  **/
  @ApiModelProperty(example = "null", value = "Specifies whether the course was defined by the SEA, LEA, School, or national organization.")
  public String getCourseDefinedByDescriptor() {
    return courseDefinedByDescriptor;
  }

  public void setCourseDefinedByDescriptor(String courseDefinedByDescriptor) {
    this.courseDefinedByDescriptor = courseDefinedByDescriptor;
  }

  public EdFiCourse courseDescription(String courseDescription) {
    this.courseDescription = courseDescription;
    return this;
  }

   /**
   * A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.
   * @return courseDescription
  **/
  @ApiModelProperty(example = "null", value = "A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.")
  public String getCourseDescription() {
    return courseDescription;
  }

  public void setCourseDescription(String courseDescription) {
    this.courseDescription = courseDescription;
  }

  public EdFiCourse courseGPAApplicabilityDescriptor(String courseGPAApplicabilityDescriptor) {
    this.courseGPAApplicabilityDescriptor = courseGPAApplicabilityDescriptor;
    return this;
  }

   /**
   * An indicator of whether or not the course being described is included in the computation of the student's Grade Point Average, and if so, if it is weighted differently from regular courses.
   * @return courseGPAApplicabilityDescriptor
  **/
  @ApiModelProperty(example = "null", value = "An indicator of whether or not the course being described is included in the computation of the student's Grade Point Average, and if so, if it is weighted differently from regular courses.")
  public String getCourseGPAApplicabilityDescriptor() {
    return courseGPAApplicabilityDescriptor;
  }

  public void setCourseGPAApplicabilityDescriptor(String courseGPAApplicabilityDescriptor) {
    this.courseGPAApplicabilityDescriptor = courseGPAApplicabilityDescriptor;
  }

  public EdFiCourse courseTitle(String courseTitle) {
    this.courseTitle = courseTitle;
    return this;
  }

   /**
   * The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).
   * @return courseTitle
  **/
  @ApiModelProperty(example = "null", required = true, value = "The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).")
  public String getCourseTitle() {
    return courseTitle;
  }

  public void setCourseTitle(String courseTitle) {
    this.courseTitle = courseTitle;
  }

  public EdFiCourse dateCourseAdopted(LocalDate dateCourseAdopted) {
    this.dateCourseAdopted = dateCourseAdopted;
    return this;
  }

   /**
   * Date the course was adopted by the education agency.
   * @return dateCourseAdopted
  **/
  @ApiModelProperty(example = "null", value = "Date the course was adopted by the education agency.")
  public LocalDate getDateCourseAdopted() {
    return dateCourseAdopted;
  }

  public void setDateCourseAdopted(LocalDate dateCourseAdopted) {
    this.dateCourseAdopted = dateCourseAdopted;
  }

  public EdFiCourse highSchoolCourseRequirement(Boolean highSchoolCourseRequirement) {
    this.highSchoolCourseRequirement = highSchoolCourseRequirement;
    return this;
  }

   /**
   * An indication that this course may satisfy high school graduation requirements in the course's subject area.
   * @return highSchoolCourseRequirement
  **/
  @ApiModelProperty(example = "null", value = "An indication that this course may satisfy high school graduation requirements in the course's subject area.")
  public Boolean getHighSchoolCourseRequirement() {
    return highSchoolCourseRequirement;
  }

  public void setHighSchoolCourseRequirement(Boolean highSchoolCourseRequirement) {
    this.highSchoolCourseRequirement = highSchoolCourseRequirement;
  }

  public EdFiCourse learningObjectives(List<EdFiCourseLearningObjective> learningObjectives) {
    this.learningObjectives = learningObjectives;
    return this;
  }

  public EdFiCourse addLearningObjectivesItem(EdFiCourseLearningObjective learningObjectivesItem) {
    this.learningObjectives.add(learningObjectivesItem);
    return this;
  }

   /**
   * An unordered collection of courseLearningObjectives. Learning Objectives to be mastered in the course.
   * @return learningObjectives
  **/
  @ApiModelProperty(example = "null", value = "An unordered collection of courseLearningObjectives. Learning Objectives to be mastered in the course.")
  public List<EdFiCourseLearningObjective> getLearningObjectives() {
    return learningObjectives;
  }

  public void setLearningObjectives(List<EdFiCourseLearningObjective> learningObjectives) {
    this.learningObjectives = learningObjectives;
  }

  public EdFiCourse learningStandards(List<EdFiCourseLearningStandard> learningStandards) {
    this.learningStandards = learningStandards;
    return this;
  }

  public EdFiCourse addLearningStandardsItem(EdFiCourseLearningStandard learningStandardsItem) {
    this.learningStandards.add(learningStandardsItem);
    return this;
  }

   /**
   * An unordered collection of courseLearningStandards. Learning Standard(s) to be taught by the course.
   * @return learningStandards
  **/
  @ApiModelProperty(example = "null", value = "An unordered collection of courseLearningStandards. Learning Standard(s) to be taught by the course.")
  public List<EdFiCourseLearningStandard> getLearningStandards() {
    return learningStandards;
  }

  public void setLearningStandards(List<EdFiCourseLearningStandard> learningStandards) {
    this.learningStandards = learningStandards;
  }

  public EdFiCourse levelCharacteristics(List<EdFiCourseLevelCharacteristic> levelCharacteristics) {
    this.levelCharacteristics = levelCharacteristics;
    return this;
  }

  public EdFiCourse addLevelCharacteristicsItem(EdFiCourseLevelCharacteristic levelCharacteristicsItem) {
    this.levelCharacteristics.add(levelCharacteristicsItem);
    return this;
  }

   /**
   * An unordered collection of courseLevelCharacteristics. The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).
   * @return levelCharacteristics
  **/
  @ApiModelProperty(example = "null", value = "An unordered collection of courseLevelCharacteristics. The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).")
  public List<EdFiCourseLevelCharacteristic> getLevelCharacteristics() {
    return levelCharacteristics;
  }

  public void setLevelCharacteristics(List<EdFiCourseLevelCharacteristic> levelCharacteristics) {
    this.levelCharacteristics = levelCharacteristics;
  }

  public EdFiCourse maxCompletionsForCredit(Integer maxCompletionsForCredit) {
    this.maxCompletionsForCredit = maxCompletionsForCredit;
    return this;
  }

   /**
   * Designates how many times the course may be taken with credit received by the student.
   * @return maxCompletionsForCredit
  **/
  @ApiModelProperty(example = "null", value = "Designates how many times the course may be taken with credit received by the student.")
  public Integer getMaxCompletionsForCredit() {
    return maxCompletionsForCredit;
  }

  public void setMaxCompletionsForCredit(Integer maxCompletionsForCredit) {
    this.maxCompletionsForCredit = maxCompletionsForCredit;
  }

  public EdFiCourse maximumAvailableCreditConversion(Double maximumAvailableCreditConversion) {
    this.maximumAvailableCreditConversion = maximumAvailableCreditConversion;
    return this;
  }

   /**
   * Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
   * @return maximumAvailableCreditConversion
  **/
  @ApiModelProperty(example = "null", value = "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.")
  public Double getMaximumAvailableCreditConversion() {
    return maximumAvailableCreditConversion;
  }

  public void setMaximumAvailableCreditConversion(Double maximumAvailableCreditConversion) {
    this.maximumAvailableCreditConversion = maximumAvailableCreditConversion;
  }

  public EdFiCourse maximumAvailableCredits(Double maximumAvailableCredits) {
    this.maximumAvailableCredits = maximumAvailableCredits;
    return this;
  }

   /**
   * The value of credits or units of value awarded for the completion of a course.
   * @return maximumAvailableCredits
  **/
  @ApiModelProperty(example = "null", value = "The value of credits or units of value awarded for the completion of a course.")
  public Double getMaximumAvailableCredits() {
    return maximumAvailableCredits;
  }

  public void setMaximumAvailableCredits(Double maximumAvailableCredits) {
    this.maximumAvailableCredits = maximumAvailableCredits;
  }

  public EdFiCourse maximumAvailableCreditTypeDescriptor(String maximumAvailableCreditTypeDescriptor) {
    this.maximumAvailableCreditTypeDescriptor = maximumAvailableCreditTypeDescriptor;
    return this;
  }

   /**
   * The type of credits or units of value awarded for the completion of a course.
   * @return maximumAvailableCreditTypeDescriptor
  **/
  @ApiModelProperty(example = "null", value = "The type of credits or units of value awarded for the completion of a course.")
  public String getMaximumAvailableCreditTypeDescriptor() {
    return maximumAvailableCreditTypeDescriptor;
  }

  public void setMaximumAvailableCreditTypeDescriptor(String maximumAvailableCreditTypeDescriptor) {
    this.maximumAvailableCreditTypeDescriptor = maximumAvailableCreditTypeDescriptor;
  }

  public EdFiCourse minimumAvailableCreditConversion(Double minimumAvailableCreditConversion) {
    this.minimumAvailableCreditConversion = minimumAvailableCreditConversion;
    return this;
  }

   /**
   * Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
   * @return minimumAvailableCreditConversion
  **/
  @ApiModelProperty(example = "null", value = "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.")
  public Double getMinimumAvailableCreditConversion() {
    return minimumAvailableCreditConversion;
  }

  public void setMinimumAvailableCreditConversion(Double minimumAvailableCreditConversion) {
    this.minimumAvailableCreditConversion = minimumAvailableCreditConversion;
  }

  public EdFiCourse minimumAvailableCredits(Double minimumAvailableCredits) {
    this.minimumAvailableCredits = minimumAvailableCredits;
    return this;
  }

   /**
   * The value of credits or units of value awarded for the completion of a course.
   * @return minimumAvailableCredits
  **/
  @ApiModelProperty(example = "null", value = "The value of credits or units of value awarded for the completion of a course.")
  public Double getMinimumAvailableCredits() {
    return minimumAvailableCredits;
  }

  public void setMinimumAvailableCredits(Double minimumAvailableCredits) {
    this.minimumAvailableCredits = minimumAvailableCredits;
  }

  public EdFiCourse minimumAvailableCreditTypeDescriptor(String minimumAvailableCreditTypeDescriptor) {
    this.minimumAvailableCreditTypeDescriptor = minimumAvailableCreditTypeDescriptor;
    return this;
  }

   /**
   * The type of credits or units of value awarded for the completion of a course.
   * @return minimumAvailableCreditTypeDescriptor
  **/
  @ApiModelProperty(example = "null", value = "The type of credits or units of value awarded for the completion of a course.")
  public String getMinimumAvailableCreditTypeDescriptor() {
    return minimumAvailableCreditTypeDescriptor;
  }

  public void setMinimumAvailableCreditTypeDescriptor(String minimumAvailableCreditTypeDescriptor) {
    this.minimumAvailableCreditTypeDescriptor = minimumAvailableCreditTypeDescriptor;
  }

  public EdFiCourse numberOfParts(Integer numberOfParts) {
    this.numberOfParts = numberOfParts;
    return this;
  }

   /**
   * The number of parts identified for a course.
   * @return numberOfParts
  **/
  @ApiModelProperty(example = "null", required = true, value = "The number of parts identified for a course.")
  public Integer getNumberOfParts() {
    return numberOfParts;
  }

  public void setNumberOfParts(Integer numberOfParts) {
    this.numberOfParts = numberOfParts;
  }

  public EdFiCourse offeredGradeLevels(List<EdFiCourseOfferedGradeLevel> offeredGradeLevels) {
    this.offeredGradeLevels = offeredGradeLevels;
    return this;
  }

  public EdFiCourse addOfferedGradeLevelsItem(EdFiCourseOfferedGradeLevel offeredGradeLevelsItem) {
    this.offeredGradeLevels.add(offeredGradeLevelsItem);
    return this;
  }

   /**
   * An unordered collection of courseOfferedGradeLevels. The grade levels in which the course is offered.
   * @return offeredGradeLevels
  **/
  @ApiModelProperty(example = "null", value = "An unordered collection of courseOfferedGradeLevels. The grade levels in which the course is offered.")
  public List<EdFiCourseOfferedGradeLevel> getOfferedGradeLevels() {
    return offeredGradeLevels;
  }

  public void setOfferedGradeLevels(List<EdFiCourseOfferedGradeLevel> offeredGradeLevels) {
    this.offeredGradeLevels = offeredGradeLevels;
  }

  public EdFiCourse timeRequiredForCompletion(Integer timeRequiredForCompletion) {
    this.timeRequiredForCompletion = timeRequiredForCompletion;
    return this;
  }

   /**
   * The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.
   * @return timeRequiredForCompletion
  **/
  @ApiModelProperty(example = "null", value = "The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.")
  public Integer getTimeRequiredForCompletion() {
    return timeRequiredForCompletion;
  }

  public void setTimeRequiredForCompletion(Integer timeRequiredForCompletion) {
    this.timeRequiredForCompletion = timeRequiredForCompletion;
  }

  public EdFiCourse etag(String etag) {
    this.etag = etag;
    return this;
  }

   /**
   * A unique system-generated value that identifies the version of the resource.
   * @return etag
  **/
  @ApiModelProperty(example = "null", value = "A unique system-generated value that identifies the version of the resource.")
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EdFiCourse edFiCourse = (EdFiCourse) o;
    return Objects.equals(this.id, edFiCourse.id) &&
        Objects.equals(this.courseCode, edFiCourse.courseCode) &&
        Objects.equals(this.identificationCodes, edFiCourse.identificationCodes) &&
        Objects.equals(this.educationOrganizationReference, edFiCourse.educationOrganizationReference) &&
        Objects.equals(this.academicSubjectDescriptor, edFiCourse.academicSubjectDescriptor) &&
        Objects.equals(this.careerPathwayDescriptor, edFiCourse.careerPathwayDescriptor) &&
        Objects.equals(this.competencyLevels, edFiCourse.competencyLevels) &&
        Objects.equals(this.courseDefinedByDescriptor, edFiCourse.courseDefinedByDescriptor) &&
        Objects.equals(this.courseDescription, edFiCourse.courseDescription) &&
        Objects.equals(this.courseGPAApplicabilityDescriptor, edFiCourse.courseGPAApplicabilityDescriptor) &&
        Objects.equals(this.courseTitle, edFiCourse.courseTitle) &&
        Objects.equals(this.dateCourseAdopted, edFiCourse.dateCourseAdopted) &&
        Objects.equals(this.highSchoolCourseRequirement, edFiCourse.highSchoolCourseRequirement) &&
        Objects.equals(this.learningObjectives, edFiCourse.learningObjectives) &&
        Objects.equals(this.learningStandards, edFiCourse.learningStandards) &&
        Objects.equals(this.levelCharacteristics, edFiCourse.levelCharacteristics) &&
        Objects.equals(this.maxCompletionsForCredit, edFiCourse.maxCompletionsForCredit) &&
        Objects.equals(this.maximumAvailableCreditConversion, edFiCourse.maximumAvailableCreditConversion) &&
        Objects.equals(this.maximumAvailableCredits, edFiCourse.maximumAvailableCredits) &&
        Objects.equals(this.maximumAvailableCreditTypeDescriptor, edFiCourse.maximumAvailableCreditTypeDescriptor) &&
        Objects.equals(this.minimumAvailableCreditConversion, edFiCourse.minimumAvailableCreditConversion) &&
        Objects.equals(this.minimumAvailableCredits, edFiCourse.minimumAvailableCredits) &&
        Objects.equals(this.minimumAvailableCreditTypeDescriptor, edFiCourse.minimumAvailableCreditTypeDescriptor) &&
        Objects.equals(this.numberOfParts, edFiCourse.numberOfParts) &&
        Objects.equals(this.offeredGradeLevels, edFiCourse.offeredGradeLevels) &&
        Objects.equals(this.timeRequiredForCompletion, edFiCourse.timeRequiredForCompletion) &&
        Objects.equals(this.etag, edFiCourse.etag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, courseCode, identificationCodes, educationOrganizationReference, academicSubjectDescriptor, careerPathwayDescriptor, competencyLevels, courseDefinedByDescriptor, courseDescription, courseGPAApplicabilityDescriptor, courseTitle, dateCourseAdopted, highSchoolCourseRequirement, learningObjectives, learningStandards, levelCharacteristics, maxCompletionsForCredit, maximumAvailableCreditConversion, maximumAvailableCredits, maximumAvailableCreditTypeDescriptor, minimumAvailableCreditConversion, minimumAvailableCredits, minimumAvailableCreditTypeDescriptor, numberOfParts, offeredGradeLevels, timeRequiredForCompletion, etag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EdFiCourse {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    courseCode: ").append(toIndentedString(courseCode)).append("\n");
    sb.append("    identificationCodes: ").append(toIndentedString(identificationCodes)).append("\n");
    sb.append("    educationOrganizationReference: ").append(toIndentedString(educationOrganizationReference)).append("\n");
    sb.append("    academicSubjectDescriptor: ").append(toIndentedString(academicSubjectDescriptor)).append("\n");
    sb.append("    careerPathwayDescriptor: ").append(toIndentedString(careerPathwayDescriptor)).append("\n");
    sb.append("    competencyLevels: ").append(toIndentedString(competencyLevels)).append("\n");
    sb.append("    courseDefinedByDescriptor: ").append(toIndentedString(courseDefinedByDescriptor)).append("\n");
    sb.append("    courseDescription: ").append(toIndentedString(courseDescription)).append("\n");
    sb.append("    courseGPAApplicabilityDescriptor: ").append(toIndentedString(courseGPAApplicabilityDescriptor)).append("\n");
    sb.append("    courseTitle: ").append(toIndentedString(courseTitle)).append("\n");
    sb.append("    dateCourseAdopted: ").append(toIndentedString(dateCourseAdopted)).append("\n");
    sb.append("    highSchoolCourseRequirement: ").append(toIndentedString(highSchoolCourseRequirement)).append("\n");
    sb.append("    learningObjectives: ").append(toIndentedString(learningObjectives)).append("\n");
    sb.append("    learningStandards: ").append(toIndentedString(learningStandards)).append("\n");
    sb.append("    levelCharacteristics: ").append(toIndentedString(levelCharacteristics)).append("\n");
    sb.append("    maxCompletionsForCredit: ").append(toIndentedString(maxCompletionsForCredit)).append("\n");
    sb.append("    maximumAvailableCreditConversion: ").append(toIndentedString(maximumAvailableCreditConversion)).append("\n");
    sb.append("    maximumAvailableCredits: ").append(toIndentedString(maximumAvailableCredits)).append("\n");
    sb.append("    maximumAvailableCreditTypeDescriptor: ").append(toIndentedString(maximumAvailableCreditTypeDescriptor)).append("\n");
    sb.append("    minimumAvailableCreditConversion: ").append(toIndentedString(minimumAvailableCreditConversion)).append("\n");
    sb.append("    minimumAvailableCredits: ").append(toIndentedString(minimumAvailableCredits)).append("\n");
    sb.append("    minimumAvailableCreditTypeDescriptor: ").append(toIndentedString(minimumAvailableCreditTypeDescriptor)).append("\n");
    sb.append("    numberOfParts: ").append(toIndentedString(numberOfParts)).append("\n");
    sb.append("    offeredGradeLevels: ").append(toIndentedString(offeredGradeLevels)).append("\n");
    sb.append("    timeRequiredForCompletion: ").append(toIndentedString(timeRequiredForCompletion)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

