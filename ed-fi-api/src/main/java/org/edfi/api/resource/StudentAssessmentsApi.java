/**
 * Ed-Fi Operational Data Store API
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.edfi.api.resource;

import org.edfi.api.ApiCallback;
import org.edfi.api.ApiClient;
import org.edfi.api.ApiException;
import org.edfi.api.ApiResponse;
import org.edfi.api.Configuration;
import org.edfi.api.Pair;
import org.edfi.api.ProgressRequestBody;
import org.edfi.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import org.edfi.model.resource.EdFiStudentAssessment;
import org.joda.time.DateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StudentAssessmentsApi {
    private ApiClient apiClient;

    public StudentAssessmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StudentAssessmentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteStudentAssessmentById */
    private com.squareup.okhttp.Call deleteStudentAssessmentByIdCall(String id, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteStudentAssessmentById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentAssessments/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Deletes an existing resource using the resource identifier.
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStudentAssessmentById(String id, String ifMatch) throws ApiException {
        deleteStudentAssessmentByIdWithHttpInfo(id, ifMatch);
    }

    /**
     * Deletes an existing resource using the resource identifier.
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStudentAssessmentByIdWithHttpInfo(String id, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = deleteStudentAssessmentByIdCall(id, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes an existing resource using the resource identifier. (asynchronously)
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStudentAssessmentByIdAsync(String id, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStudentAssessmentByIdCall(id, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getStudentAssessments */
    private com.squareup.okhttp.Call getStudentAssessmentsCall(Integer offset, Integer limit, Boolean totalCount, String studentAssessmentIdentifier, String assessmentIdentifier, String namespace, String studentUniqueId, Integer schoolYear, String administrationEnvironmentDescriptor, String eventCircumstanceDescriptor, String whenAssessedGradeLevelDescriptor, String administrationLanguageDescriptor, String reasonNotTestedDescriptor, String retestIndicatorDescriptor, DateTime administrationDate, DateTime administrationEndDate, String eventDescription, String id, String serialNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentAssessments".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (totalCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalCount", totalCount));
        if (studentAssessmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "studentAssessmentIdentifier", studentAssessmentIdentifier));
        if (assessmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "assessmentIdentifier", assessmentIdentifier));
        if (namespace != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "namespace", namespace));
        if (studentUniqueId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "studentUniqueId", studentUniqueId));
        if (schoolYear != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "schoolYear", schoolYear));
        if (administrationEnvironmentDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "administrationEnvironmentDescriptor", administrationEnvironmentDescriptor));
        if (eventCircumstanceDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "eventCircumstanceDescriptor", eventCircumstanceDescriptor));
        if (whenAssessedGradeLevelDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "whenAssessedGradeLevelDescriptor", whenAssessedGradeLevelDescriptor));
        if (administrationLanguageDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "administrationLanguageDescriptor", administrationLanguageDescriptor));
        if (reasonNotTestedDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "reasonNotTestedDescriptor", reasonNotTestedDescriptor));
        if (retestIndicatorDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "retestIndicatorDescriptor", retestIndicatorDescriptor));
        if (administrationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "administrationDate", administrationDate));
        if (administrationEndDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "administrationEndDate", administrationEndDate));
        if (eventDescription != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "eventDescription", eventDescription));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "id", id));
        if (serialNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "serialNumber", serialNumber));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param studentAssessmentIdentifier A unique number or alphanumeric code assigned to an assessment administered to a student. (optional)
     * @param assessmentIdentifier A unique number or alphanumeric code assigned to an assessment. (optional)
     * @param namespace Namespace for the Assessment. (optional)
     * @param studentUniqueId A unique alphanumeric code assigned to a student. (optional)
     * @param schoolYear The school year for which the assessment was administered to a student. Among other uses, handles cases in which a student takes a prior-year exam in a subsequent school year during an exam re-test. (optional)
     * @param administrationEnvironmentDescriptor The environment in which the test was administered. For example:          Electronic          Classroom          Testing Center          ... (optional)
     * @param eventCircumstanceDescriptor An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc. (optional)
     * @param whenAssessedGradeLevelDescriptor The grade level of a student when assessed. (optional)
     * @param administrationLanguageDescriptor The language in which an assessment is written and/or administered. (optional)
     * @param reasonNotTestedDescriptor The primary reason student is not tested. For example:          Absent          Refusal by parent          Refusal by student          Medical waiver          Illness          Disruptive behavior          LEP Exempt          ... (optional)
     * @param retestIndicatorDescriptor Indicator if the test was retaken. For example:          Primary administration          First retest          Second retest          ... (optional)
     * @param administrationDate The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones. (optional)
     * @param administrationEndDate The date and time an assessment administration ended. (optional)
     * @param eventDescription Describes special events that occur before during or after the assessment session that may impact use of results. (optional)
     * @param id  (optional)
     * @param serialNumber The unique number for the assessment form or answer document. (optional)
     * @return List&lt;EdFiStudentAssessment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EdFiStudentAssessment> getStudentAssessments(Integer offset, Integer limit, Boolean totalCount, String studentAssessmentIdentifier, String assessmentIdentifier, String namespace, String studentUniqueId, Integer schoolYear, String administrationEnvironmentDescriptor, String eventCircumstanceDescriptor, String whenAssessedGradeLevelDescriptor, String administrationLanguageDescriptor, String reasonNotTestedDescriptor, String retestIndicatorDescriptor, DateTime administrationDate, DateTime administrationEndDate, String eventDescription, String id, String serialNumber) throws ApiException {
        ApiResponse<List<EdFiStudentAssessment>> resp = getStudentAssessmentsWithHttpInfo(offset, limit, totalCount, studentAssessmentIdentifier, assessmentIdentifier, namespace, studentUniqueId, schoolYear, administrationEnvironmentDescriptor, eventCircumstanceDescriptor, whenAssessedGradeLevelDescriptor, administrationLanguageDescriptor, reasonNotTestedDescriptor, retestIndicatorDescriptor, administrationDate, administrationEndDate, eventDescription, id, serialNumber);
        return resp.getData();
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param studentAssessmentIdentifier A unique number or alphanumeric code assigned to an assessment administered to a student. (optional)
     * @param assessmentIdentifier A unique number or alphanumeric code assigned to an assessment. (optional)
     * @param namespace Namespace for the Assessment. (optional)
     * @param studentUniqueId A unique alphanumeric code assigned to a student. (optional)
     * @param schoolYear The school year for which the assessment was administered to a student. Among other uses, handles cases in which a student takes a prior-year exam in a subsequent school year during an exam re-test. (optional)
     * @param administrationEnvironmentDescriptor The environment in which the test was administered. For example:          Electronic          Classroom          Testing Center          ... (optional)
     * @param eventCircumstanceDescriptor An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc. (optional)
     * @param whenAssessedGradeLevelDescriptor The grade level of a student when assessed. (optional)
     * @param administrationLanguageDescriptor The language in which an assessment is written and/or administered. (optional)
     * @param reasonNotTestedDescriptor The primary reason student is not tested. For example:          Absent          Refusal by parent          Refusal by student          Medical waiver          Illness          Disruptive behavior          LEP Exempt          ... (optional)
     * @param retestIndicatorDescriptor Indicator if the test was retaken. For example:          Primary administration          First retest          Second retest          ... (optional)
     * @param administrationDate The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones. (optional)
     * @param administrationEndDate The date and time an assessment administration ended. (optional)
     * @param eventDescription Describes special events that occur before during or after the assessment session that may impact use of results. (optional)
     * @param id  (optional)
     * @param serialNumber The unique number for the assessment form or answer document. (optional)
     * @return ApiResponse&lt;List&lt;EdFiStudentAssessment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EdFiStudentAssessment>> getStudentAssessmentsWithHttpInfo(Integer offset, Integer limit, Boolean totalCount, String studentAssessmentIdentifier, String assessmentIdentifier, String namespace, String studentUniqueId, Integer schoolYear, String administrationEnvironmentDescriptor, String eventCircumstanceDescriptor, String whenAssessedGradeLevelDescriptor, String administrationLanguageDescriptor, String reasonNotTestedDescriptor, String retestIndicatorDescriptor, DateTime administrationDate, DateTime administrationEndDate, String eventDescription, String id, String serialNumber) throws ApiException {
        com.squareup.okhttp.Call call = getStudentAssessmentsCall(offset, limit, totalCount, studentAssessmentIdentifier, assessmentIdentifier, namespace, studentUniqueId, schoolYear, administrationEnvironmentDescriptor, eventCircumstanceDescriptor, whenAssessedGradeLevelDescriptor, administrationLanguageDescriptor, reasonNotTestedDescriptor, retestIndicatorDescriptor, administrationDate, administrationEndDate, eventDescription, id, serialNumber, null, null);
        Type localVarReturnType = new TypeToken<List<EdFiStudentAssessment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). (asynchronously)
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param studentAssessmentIdentifier A unique number or alphanumeric code assigned to an assessment administered to a student. (optional)
     * @param assessmentIdentifier A unique number or alphanumeric code assigned to an assessment. (optional)
     * @param namespace Namespace for the Assessment. (optional)
     * @param studentUniqueId A unique alphanumeric code assigned to a student. (optional)
     * @param schoolYear The school year for which the assessment was administered to a student. Among other uses, handles cases in which a student takes a prior-year exam in a subsequent school year during an exam re-test. (optional)
     * @param administrationEnvironmentDescriptor The environment in which the test was administered. For example:          Electronic          Classroom          Testing Center          ... (optional)
     * @param eventCircumstanceDescriptor An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc. (optional)
     * @param whenAssessedGradeLevelDescriptor The grade level of a student when assessed. (optional)
     * @param administrationLanguageDescriptor The language in which an assessment is written and/or administered. (optional)
     * @param reasonNotTestedDescriptor The primary reason student is not tested. For example:          Absent          Refusal by parent          Refusal by student          Medical waiver          Illness          Disruptive behavior          LEP Exempt          ... (optional)
     * @param retestIndicatorDescriptor Indicator if the test was retaken. For example:          Primary administration          First retest          Second retest          ... (optional)
     * @param administrationDate The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones. (optional)
     * @param administrationEndDate The date and time an assessment administration ended. (optional)
     * @param eventDescription Describes special events that occur before during or after the assessment session that may impact use of results. (optional)
     * @param id  (optional)
     * @param serialNumber The unique number for the assessment form or answer document. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStudentAssessmentsAsync(Integer offset, Integer limit, Boolean totalCount, String studentAssessmentIdentifier, String assessmentIdentifier, String namespace, String studentUniqueId, Integer schoolYear, String administrationEnvironmentDescriptor, String eventCircumstanceDescriptor, String whenAssessedGradeLevelDescriptor, String administrationLanguageDescriptor, String reasonNotTestedDescriptor, String retestIndicatorDescriptor, DateTime administrationDate, DateTime administrationEndDate, String eventDescription, String id, String serialNumber, final ApiCallback<List<EdFiStudentAssessment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStudentAssessmentsCall(offset, limit, totalCount, studentAssessmentIdentifier, assessmentIdentifier, namespace, studentUniqueId, schoolYear, administrationEnvironmentDescriptor, eventCircumstanceDescriptor, whenAssessedGradeLevelDescriptor, administrationLanguageDescriptor, reasonNotTestedDescriptor, retestIndicatorDescriptor, administrationDate, administrationEndDate, eventDescription, id, serialNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EdFiStudentAssessment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStudentAssessmentsById */
    private com.squareup.okhttp.Call getStudentAssessmentsByIdCall(String id, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStudentAssessmentsById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentAssessments/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null)
        localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return EdFiStudentAssessment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EdFiStudentAssessment getStudentAssessmentsById(String id, String ifNoneMatch) throws ApiException {
        ApiResponse<EdFiStudentAssessment> resp = getStudentAssessmentsByIdWithHttpInfo(id, ifNoneMatch);
        return resp.getData();
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return ApiResponse&lt;EdFiStudentAssessment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EdFiStudentAssessment> getStudentAssessmentsByIdWithHttpInfo(String id, String ifNoneMatch) throws ApiException {
        com.squareup.okhttp.Call call = getStudentAssessmentsByIdCall(id, ifNoneMatch, null, null);
        Type localVarReturnType = new TypeToken<EdFiStudentAssessment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). (asynchronously)
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStudentAssessmentsByIdAsync(String id, String ifNoneMatch, final ApiCallback<EdFiStudentAssessment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStudentAssessmentsByIdCall(id, ifNoneMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EdFiStudentAssessment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postStudentAssessment */
    private com.squareup.okhttp.Call postStudentAssessmentCall(EdFiStudentAssessment studentAssessment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = studentAssessment;
        
        // verify the required parameter 'studentAssessment' is set
        if (studentAssessment == null) {
            throw new ApiException("Missing the required parameter 'studentAssessment' when calling postStudentAssessment(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentAssessments".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource.
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param studentAssessment The JSON representation of the \&quot;studentAssessment\&quot; resource to be created or updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postStudentAssessment(EdFiStudentAssessment studentAssessment) throws ApiException {
        postStudentAssessmentWithHttpInfo(studentAssessment);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource.
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param studentAssessment The JSON representation of the \&quot;studentAssessment\&quot; resource to be created or updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postStudentAssessmentWithHttpInfo(EdFiStudentAssessment studentAssessment) throws ApiException {
        com.squareup.okhttp.Call call = postStudentAssessmentCall(studentAssessment, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource. (asynchronously)
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param studentAssessment The JSON representation of the \&quot;studentAssessment\&quot; resource to be created or updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postStudentAssessmentAsync(EdFiStudentAssessment studentAssessment, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postStudentAssessmentCall(studentAssessment, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for putStudentAssessment */
    private com.squareup.okhttp.Call putStudentAssessmentCall(String id, EdFiStudentAssessment studentAssessment, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = studentAssessment;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putStudentAssessment(Async)");
        }
        
        // verify the required parameter 'studentAssessment' is set
        if (studentAssessment == null) {
            throw new ApiException("Missing the required parameter 'studentAssessment' when calling putStudentAssessment(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentAssessments/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates or creates a resource based on the resource identifier.
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param studentAssessment The JSON representation of the \&quot;studentAssessment\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putStudentAssessment(String id, EdFiStudentAssessment studentAssessment, String ifMatch) throws ApiException {
        putStudentAssessmentWithHttpInfo(id, studentAssessment, ifMatch);
    }

    /**
     * Updates or creates a resource based on the resource identifier.
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param studentAssessment The JSON representation of the \&quot;studentAssessment\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putStudentAssessmentWithHttpInfo(String id, EdFiStudentAssessment studentAssessment, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = putStudentAssessmentCall(id, studentAssessment, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates or creates a resource based on the resource identifier. (asynchronously)
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param studentAssessment The JSON representation of the \&quot;studentAssessment\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putStudentAssessmentAsync(String id, EdFiStudentAssessment studentAssessment, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putStudentAssessmentCall(id, studentAssessment, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
