/**
 * Ed-Fi Operational Data Store API
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.edfi.api.resource;

import org.edfi.api.ApiCallback;
import org.edfi.api.ApiClient;
import org.edfi.api.ApiException;
import org.edfi.api.ApiResponse;
import org.edfi.api.Configuration;
import org.edfi.api.Pair;
import org.edfi.api.ProgressRequestBody;
import org.edfi.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import org.edfi.model.resource.TpdmApplication;
import org.joda.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationsApi {
    private ApiClient apiClient;

    public ApplicationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteApplicationById */
    private com.squareup.okhttp.Call deleteApplicationByIdCall(String id, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteApplicationById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tpdm/applications/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Deletes an existing resource using the resource identifier.
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteApplicationById(String id, String ifMatch) throws ApiException {
        deleteApplicationByIdWithHttpInfo(id, ifMatch);
    }

    /**
     * Deletes an existing resource using the resource identifier.
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteApplicationByIdWithHttpInfo(String id, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = deleteApplicationByIdCall(id, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes an existing resource using the resource identifier. (asynchronously)
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteApplicationByIdAsync(String id, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteApplicationByIdCall(id, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getApplications */
    private com.squareup.okhttp.Call getApplicationsCall(Integer offset, Integer limit, Boolean totalCount, String applicationIdentifier, String applicantIdentifier, Integer educationOrganizationId, String academicSubjectDescriptor, String highNeedsAcademicSubjectDescriptor, String applicationSourceDescriptor, String applicationStatusDescriptor, String hireStatusDescriptor, String hiringSourceDescriptor, String withdrawReasonDescriptor, LocalDate acceptedDate, LocalDate applicationDate, Boolean currentEmployee, LocalDate firstContactDate, String id, LocalDate withdrawDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/tpdm/applications".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (totalCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalCount", totalCount));
        if (applicationIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "applicationIdentifier", applicationIdentifier));
        if (applicantIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "applicantIdentifier", applicantIdentifier));
        if (educationOrganizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "educationOrganizationId", educationOrganizationId));
        if (academicSubjectDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "academicSubjectDescriptor", academicSubjectDescriptor));
        if (highNeedsAcademicSubjectDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "highNeedsAcademicSubjectDescriptor", highNeedsAcademicSubjectDescriptor));
        if (applicationSourceDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "applicationSourceDescriptor", applicationSourceDescriptor));
        if (applicationStatusDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "applicationStatusDescriptor", applicationStatusDescriptor));
        if (hireStatusDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hireStatusDescriptor", hireStatusDescriptor));
        if (hiringSourceDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hiringSourceDescriptor", hiringSourceDescriptor));
        if (withdrawReasonDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "withdrawReasonDescriptor", withdrawReasonDescriptor));
        if (acceptedDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "acceptedDate", acceptedDate));
        if (applicationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "applicationDate", applicationDate));
        if (currentEmployee != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentEmployee", currentEmployee));
        if (firstContactDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstContactDate", firstContactDate));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "id", id));
        if (withdrawDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "withdrawDate", withdrawDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param applicationIdentifier Identifier assigned to the application for an open staff position. (optional)
     * @param applicantIdentifier Identifier assigned to a person making formal application for an open staff position. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param academicSubjectDescriptor The academic subject for which the application is made. (optional)
     * @param highNeedsAcademicSubjectDescriptor The high need academic subject for the application, if any. (optional)
     * @param applicationSourceDescriptor Specifies the source for the application (e.g., Job fair, website, referral). (optional)
     * @param applicationStatusDescriptor Indicates the current status of the application (e.g., received, phone screen, interview, awaiting decision, etc.). (optional)
     * @param hireStatusDescriptor Indicates the current status of the application for hire (e.g., applied, recommended, rejected, exited, offered, hired). (optional)
     * @param hiringSourceDescriptor The source for the application (e.g.,job fair, website, referral, etc.). (optional)
     * @param withdrawReasonDescriptor Reason applicant withdrew application. (optional)
     * @param acceptedDate The date of job acceptance, if offered. (optional)
     * @param applicationDate The month, day, and year the application was submitted. (optional)
     * @param currentEmployee Indicator as to whether the applicant is a current employee of the school district. (optional)
     * @param firstContactDate Date applicant was first contacted after submitting application. (optional)
     * @param id  (optional)
     * @param withdrawDate The date the application was withdrawn by the applicant. (optional)
     * @return List&lt;TpdmApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TpdmApplication> getApplications(Integer offset, Integer limit, Boolean totalCount, String applicationIdentifier, String applicantIdentifier, Integer educationOrganizationId, String academicSubjectDescriptor, String highNeedsAcademicSubjectDescriptor, String applicationSourceDescriptor, String applicationStatusDescriptor, String hireStatusDescriptor, String hiringSourceDescriptor, String withdrawReasonDescriptor, LocalDate acceptedDate, LocalDate applicationDate, Boolean currentEmployee, LocalDate firstContactDate, String id, LocalDate withdrawDate) throws ApiException {
        ApiResponse<List<TpdmApplication>> resp = getApplicationsWithHttpInfo(offset, limit, totalCount, applicationIdentifier, applicantIdentifier, educationOrganizationId, academicSubjectDescriptor, highNeedsAcademicSubjectDescriptor, applicationSourceDescriptor, applicationStatusDescriptor, hireStatusDescriptor, hiringSourceDescriptor, withdrawReasonDescriptor, acceptedDate, applicationDate, currentEmployee, firstContactDate, id, withdrawDate);
        return resp.getData();
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param applicationIdentifier Identifier assigned to the application for an open staff position. (optional)
     * @param applicantIdentifier Identifier assigned to a person making formal application for an open staff position. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param academicSubjectDescriptor The academic subject for which the application is made. (optional)
     * @param highNeedsAcademicSubjectDescriptor The high need academic subject for the application, if any. (optional)
     * @param applicationSourceDescriptor Specifies the source for the application (e.g., Job fair, website, referral). (optional)
     * @param applicationStatusDescriptor Indicates the current status of the application (e.g., received, phone screen, interview, awaiting decision, etc.). (optional)
     * @param hireStatusDescriptor Indicates the current status of the application for hire (e.g., applied, recommended, rejected, exited, offered, hired). (optional)
     * @param hiringSourceDescriptor The source for the application (e.g.,job fair, website, referral, etc.). (optional)
     * @param withdrawReasonDescriptor Reason applicant withdrew application. (optional)
     * @param acceptedDate The date of job acceptance, if offered. (optional)
     * @param applicationDate The month, day, and year the application was submitted. (optional)
     * @param currentEmployee Indicator as to whether the applicant is a current employee of the school district. (optional)
     * @param firstContactDate Date applicant was first contacted after submitting application. (optional)
     * @param id  (optional)
     * @param withdrawDate The date the application was withdrawn by the applicant. (optional)
     * @return ApiResponse&lt;List&lt;TpdmApplication&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TpdmApplication>> getApplicationsWithHttpInfo(Integer offset, Integer limit, Boolean totalCount, String applicationIdentifier, String applicantIdentifier, Integer educationOrganizationId, String academicSubjectDescriptor, String highNeedsAcademicSubjectDescriptor, String applicationSourceDescriptor, String applicationStatusDescriptor, String hireStatusDescriptor, String hiringSourceDescriptor, String withdrawReasonDescriptor, LocalDate acceptedDate, LocalDate applicationDate, Boolean currentEmployee, LocalDate firstContactDate, String id, LocalDate withdrawDate) throws ApiException {
        com.squareup.okhttp.Call call = getApplicationsCall(offset, limit, totalCount, applicationIdentifier, applicantIdentifier, educationOrganizationId, academicSubjectDescriptor, highNeedsAcademicSubjectDescriptor, applicationSourceDescriptor, applicationStatusDescriptor, hireStatusDescriptor, hiringSourceDescriptor, withdrawReasonDescriptor, acceptedDate, applicationDate, currentEmployee, firstContactDate, id, withdrawDate, null, null);
        Type localVarReturnType = new TypeToken<List<TpdmApplication>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). (asynchronously)
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param applicationIdentifier Identifier assigned to the application for an open staff position. (optional)
     * @param applicantIdentifier Identifier assigned to a person making formal application for an open staff position. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param academicSubjectDescriptor The academic subject for which the application is made. (optional)
     * @param highNeedsAcademicSubjectDescriptor The high need academic subject for the application, if any. (optional)
     * @param applicationSourceDescriptor Specifies the source for the application (e.g., Job fair, website, referral). (optional)
     * @param applicationStatusDescriptor Indicates the current status of the application (e.g., received, phone screen, interview, awaiting decision, etc.). (optional)
     * @param hireStatusDescriptor Indicates the current status of the application for hire (e.g., applied, recommended, rejected, exited, offered, hired). (optional)
     * @param hiringSourceDescriptor The source for the application (e.g.,job fair, website, referral, etc.). (optional)
     * @param withdrawReasonDescriptor Reason applicant withdrew application. (optional)
     * @param acceptedDate The date of job acceptance, if offered. (optional)
     * @param applicationDate The month, day, and year the application was submitted. (optional)
     * @param currentEmployee Indicator as to whether the applicant is a current employee of the school district. (optional)
     * @param firstContactDate Date applicant was first contacted after submitting application. (optional)
     * @param id  (optional)
     * @param withdrawDate The date the application was withdrawn by the applicant. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicationsAsync(Integer offset, Integer limit, Boolean totalCount, String applicationIdentifier, String applicantIdentifier, Integer educationOrganizationId, String academicSubjectDescriptor, String highNeedsAcademicSubjectDescriptor, String applicationSourceDescriptor, String applicationStatusDescriptor, String hireStatusDescriptor, String hiringSourceDescriptor, String withdrawReasonDescriptor, LocalDate acceptedDate, LocalDate applicationDate, Boolean currentEmployee, LocalDate firstContactDate, String id, LocalDate withdrawDate, final ApiCallback<List<TpdmApplication>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationsCall(offset, limit, totalCount, applicationIdentifier, applicantIdentifier, educationOrganizationId, academicSubjectDescriptor, highNeedsAcademicSubjectDescriptor, applicationSourceDescriptor, applicationStatusDescriptor, hireStatusDescriptor, hiringSourceDescriptor, withdrawReasonDescriptor, acceptedDate, applicationDate, currentEmployee, firstContactDate, id, withdrawDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TpdmApplication>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getApplicationsById */
    private com.squareup.okhttp.Call getApplicationsByIdCall(String id, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getApplicationsById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tpdm/applications/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null)
        localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return TpdmApplication
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TpdmApplication getApplicationsById(String id, String ifNoneMatch) throws ApiException {
        ApiResponse<TpdmApplication> resp = getApplicationsByIdWithHttpInfo(id, ifNoneMatch);
        return resp.getData();
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return ApiResponse&lt;TpdmApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TpdmApplication> getApplicationsByIdWithHttpInfo(String id, String ifNoneMatch) throws ApiException {
        com.squareup.okhttp.Call call = getApplicationsByIdCall(id, ifNoneMatch, null, null);
        Type localVarReturnType = new TypeToken<TpdmApplication>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). (asynchronously)
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicationsByIdAsync(String id, String ifNoneMatch, final ApiCallback<TpdmApplication> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationsByIdCall(id, ifNoneMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TpdmApplication>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postApplication */
    private com.squareup.okhttp.Call postApplicationCall(TpdmApplication application, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = application;
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling postApplication(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tpdm/applications".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource.
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param application The JSON representation of the \&quot;application\&quot; resource to be created or updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postApplication(TpdmApplication application) throws ApiException {
        postApplicationWithHttpInfo(application);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource.
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param application The JSON representation of the \&quot;application\&quot; resource to be created or updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postApplicationWithHttpInfo(TpdmApplication application) throws ApiException {
        com.squareup.okhttp.Call call = postApplicationCall(application, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource. (asynchronously)
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param application The JSON representation of the \&quot;application\&quot; resource to be created or updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postApplicationAsync(TpdmApplication application, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postApplicationCall(application, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for putApplication */
    private com.squareup.okhttp.Call putApplicationCall(String id, TpdmApplication application, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = application;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putApplication(Async)");
        }
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling putApplication(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tpdm/applications/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates or creates a resource based on the resource identifier.
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param application The JSON representation of the \&quot;application\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putApplication(String id, TpdmApplication application, String ifMatch) throws ApiException {
        putApplicationWithHttpInfo(id, application, ifMatch);
    }

    /**
     * Updates or creates a resource based on the resource identifier.
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param application The JSON representation of the \&quot;application\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putApplicationWithHttpInfo(String id, TpdmApplication application, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = putApplicationCall(id, application, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates or creates a resource based on the resource identifier. (asynchronously)
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param application The JSON representation of the \&quot;application\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putApplicationAsync(String id, TpdmApplication application, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putApplicationCall(id, application, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
