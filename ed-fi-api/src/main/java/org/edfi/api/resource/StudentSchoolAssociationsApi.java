/**
 * Ed-Fi Operational Data Store API
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.edfi.api.resource;

import org.edfi.api.ApiCallback;
import org.edfi.api.ApiClient;
import org.edfi.api.ApiException;
import org.edfi.api.ApiResponse;
import org.edfi.api.Configuration;
import org.edfi.api.Pair;
import org.edfi.api.ProgressRequestBody;
import org.edfi.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import org.edfi.model.resource.EdFiStudentSchoolAssociation;
import org.joda.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StudentSchoolAssociationsApi {
    private ApiClient apiClient;

    public StudentSchoolAssociationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StudentSchoolAssociationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteStudentSchoolAssociationById */
    private com.squareup.okhttp.Call deleteStudentSchoolAssociationByIdCall(String id, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteStudentSchoolAssociationById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentSchoolAssociations/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Deletes an existing resource using the resource identifier.
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStudentSchoolAssociationById(String id, String ifMatch) throws ApiException {
        deleteStudentSchoolAssociationByIdWithHttpInfo(id, ifMatch);
    }

    /**
     * Deletes an existing resource using the resource identifier.
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStudentSchoolAssociationByIdWithHttpInfo(String id, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = deleteStudentSchoolAssociationByIdCall(id, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes an existing resource using the resource identifier. (asynchronously)
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStudentSchoolAssociationByIdAsync(String id, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStudentSchoolAssociationByIdCall(id, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getStudentSchoolAssociations */
    private com.squareup.okhttp.Call getStudentSchoolAssociationsCall(Integer offset, Integer limit, Boolean totalCount, LocalDate entryDate, Integer schoolId, String studentUniqueId, String calendarCode, Integer schoolYear, Integer educationOrganizationId, String graduationPlanTypeDescriptor, Integer graduationSchoolYear, Integer classOfSchoolYear, String entryGradeLevelReasonDescriptor, String entryTypeDescriptor, String exitWithdrawTypeDescriptor, String entryGradeLevelDescriptor, String residencyStatusDescriptor, Boolean employedWhileEnrolled, LocalDate exitWithdrawDate, String id, Boolean primarySchool, Boolean repeatGradeIndicator, Boolean schoolChoiceTransfer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentSchoolAssociations".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (totalCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalCount", totalCount));
        if (entryDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "entryDate", entryDate));
        if (schoolId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "schoolId", schoolId));
        if (studentUniqueId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "studentUniqueId", studentUniqueId));
        if (calendarCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "calendarCode", calendarCode));
        if (schoolYear != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "schoolYear", schoolYear));
        if (educationOrganizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "educationOrganizationId", educationOrganizationId));
        if (graduationPlanTypeDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "graduationPlanTypeDescriptor", graduationPlanTypeDescriptor));
        if (graduationSchoolYear != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "graduationSchoolYear", graduationSchoolYear));
        if (classOfSchoolYear != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "classOfSchoolYear", classOfSchoolYear));
        if (entryGradeLevelReasonDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "entryGradeLevelReasonDescriptor", entryGradeLevelReasonDescriptor));
        if (entryTypeDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "entryTypeDescriptor", entryTypeDescriptor));
        if (exitWithdrawTypeDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "exitWithdrawTypeDescriptor", exitWithdrawTypeDescriptor));
        if (entryGradeLevelDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "entryGradeLevelDescriptor", entryGradeLevelDescriptor));
        if (residencyStatusDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "residencyStatusDescriptor", residencyStatusDescriptor));
        if (employedWhileEnrolled != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "employedWhileEnrolled", employedWhileEnrolled));
        if (exitWithdrawDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "exitWithdrawDate", exitWithdrawDate));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "id", id));
        if (primarySchool != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "primarySchool", primarySchool));
        if (repeatGradeIndicator != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "repeatGradeIndicator", repeatGradeIndicator));
        if (schoolChoiceTransfer != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "schoolChoiceTransfer", schoolChoiceTransfer));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param entryDate The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)
     * @param schoolId The identifier assigned to a school. (optional)
     * @param studentUniqueId A unique alphanumeric code assigned to a student. (optional)
     * @param calendarCode The identifier for the Calendar. (optional)
     * @param schoolYear The school year associated with the student&#39;s enrollment. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param graduationPlanTypeDescriptor The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard. (optional)
     * @param graduationSchoolYear The school year the student is expected to graduate. (optional)
     * @param classOfSchoolYear Projected High School graduation year. (optional)
     * @param entryGradeLevelReasonDescriptor The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)
     * @param entryTypeDescriptor The process by which a student enters a school during a given academic session. (optional)
     * @param exitWithdrawTypeDescriptor The circumstances under which the student exited from membership in an educational institution. (optional)
     * @param entryGradeLevelDescriptor The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)
     * @param residencyStatusDescriptor An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)
     * @param employedWhileEnrolled An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)
     * @param exitWithdrawDate The month, day, and year of the first day after the date of an individual&#39;s last attendance at a school (if known), the day on which an individual graduated, or the date on which it becomes known officially that an individual left school. (optional)
     * @param id  (optional)
     * @param primarySchool Indicates if a given enrollment record should be considered the primary record for a student. (optional)
     * @param repeatGradeIndicator An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)
     * @param schoolChoiceTransfer An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)
     * @return List&lt;EdFiStudentSchoolAssociation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EdFiStudentSchoolAssociation> getStudentSchoolAssociations(Integer offset, Integer limit, Boolean totalCount, LocalDate entryDate, Integer schoolId, String studentUniqueId, String calendarCode, Integer schoolYear, Integer educationOrganizationId, String graduationPlanTypeDescriptor, Integer graduationSchoolYear, Integer classOfSchoolYear, String entryGradeLevelReasonDescriptor, String entryTypeDescriptor, String exitWithdrawTypeDescriptor, String entryGradeLevelDescriptor, String residencyStatusDescriptor, Boolean employedWhileEnrolled, LocalDate exitWithdrawDate, String id, Boolean primarySchool, Boolean repeatGradeIndicator, Boolean schoolChoiceTransfer) throws ApiException {
        ApiResponse<List<EdFiStudentSchoolAssociation>> resp = getStudentSchoolAssociationsWithHttpInfo(offset, limit, totalCount, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, classOfSchoolYear, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, residencyStatusDescriptor, employedWhileEnrolled, exitWithdrawDate, id, primarySchool, repeatGradeIndicator, schoolChoiceTransfer);
        return resp.getData();
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param entryDate The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)
     * @param schoolId The identifier assigned to a school. (optional)
     * @param studentUniqueId A unique alphanumeric code assigned to a student. (optional)
     * @param calendarCode The identifier for the Calendar. (optional)
     * @param schoolYear The school year associated with the student&#39;s enrollment. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param graduationPlanTypeDescriptor The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard. (optional)
     * @param graduationSchoolYear The school year the student is expected to graduate. (optional)
     * @param classOfSchoolYear Projected High School graduation year. (optional)
     * @param entryGradeLevelReasonDescriptor The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)
     * @param entryTypeDescriptor The process by which a student enters a school during a given academic session. (optional)
     * @param exitWithdrawTypeDescriptor The circumstances under which the student exited from membership in an educational institution. (optional)
     * @param entryGradeLevelDescriptor The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)
     * @param residencyStatusDescriptor An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)
     * @param employedWhileEnrolled An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)
     * @param exitWithdrawDate The month, day, and year of the first day after the date of an individual&#39;s last attendance at a school (if known), the day on which an individual graduated, or the date on which it becomes known officially that an individual left school. (optional)
     * @param id  (optional)
     * @param primarySchool Indicates if a given enrollment record should be considered the primary record for a student. (optional)
     * @param repeatGradeIndicator An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)
     * @param schoolChoiceTransfer An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)
     * @return ApiResponse&lt;List&lt;EdFiStudentSchoolAssociation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EdFiStudentSchoolAssociation>> getStudentSchoolAssociationsWithHttpInfo(Integer offset, Integer limit, Boolean totalCount, LocalDate entryDate, Integer schoolId, String studentUniqueId, String calendarCode, Integer schoolYear, Integer educationOrganizationId, String graduationPlanTypeDescriptor, Integer graduationSchoolYear, Integer classOfSchoolYear, String entryGradeLevelReasonDescriptor, String entryTypeDescriptor, String exitWithdrawTypeDescriptor, String entryGradeLevelDescriptor, String residencyStatusDescriptor, Boolean employedWhileEnrolled, LocalDate exitWithdrawDate, String id, Boolean primarySchool, Boolean repeatGradeIndicator, Boolean schoolChoiceTransfer) throws ApiException {
        com.squareup.okhttp.Call call = getStudentSchoolAssociationsCall(offset, limit, totalCount, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, classOfSchoolYear, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, residencyStatusDescriptor, employedWhileEnrolled, exitWithdrawDate, id, primarySchool, repeatGradeIndicator, schoolChoiceTransfer, null, null);
        Type localVarReturnType = new TypeToken<List<EdFiStudentSchoolAssociation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). (asynchronously)
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param entryDate The month, day, and year on which an individual enters and begins to receive instructional services in a school. (optional)
     * @param schoolId The identifier assigned to a school. (optional)
     * @param studentUniqueId A unique alphanumeric code assigned to a student. (optional)
     * @param calendarCode The identifier for the Calendar. (optional)
     * @param schoolYear The school year associated with the student&#39;s enrollment. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param graduationPlanTypeDescriptor The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard. (optional)
     * @param graduationSchoolYear The school year the student is expected to graduate. (optional)
     * @param classOfSchoolYear Projected High School graduation year. (optional)
     * @param entryGradeLevelReasonDescriptor The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term. (optional)
     * @param entryTypeDescriptor The process by which a student enters a school during a given academic session. (optional)
     * @param exitWithdrawTypeDescriptor The circumstances under which the student exited from membership in an educational institution. (optional)
     * @param entryGradeLevelDescriptor The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session. (optional)
     * @param residencyStatusDescriptor An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit. (optional)
     * @param employedWhileEnrolled An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education. (optional)
     * @param exitWithdrawDate The month, day, and year of the first day after the date of an individual&#39;s last attendance at a school (if known), the day on which an individual graduated, or the date on which it becomes known officially that an individual left school. (optional)
     * @param id  (optional)
     * @param primarySchool Indicates if a given enrollment record should be considered the primary record for a student. (optional)
     * @param repeatGradeIndicator An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back. (optional)
     * @param schoolChoiceTransfer An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStudentSchoolAssociationsAsync(Integer offset, Integer limit, Boolean totalCount, LocalDate entryDate, Integer schoolId, String studentUniqueId, String calendarCode, Integer schoolYear, Integer educationOrganizationId, String graduationPlanTypeDescriptor, Integer graduationSchoolYear, Integer classOfSchoolYear, String entryGradeLevelReasonDescriptor, String entryTypeDescriptor, String exitWithdrawTypeDescriptor, String entryGradeLevelDescriptor, String residencyStatusDescriptor, Boolean employedWhileEnrolled, LocalDate exitWithdrawDate, String id, Boolean primarySchool, Boolean repeatGradeIndicator, Boolean schoolChoiceTransfer, final ApiCallback<List<EdFiStudentSchoolAssociation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStudentSchoolAssociationsCall(offset, limit, totalCount, entryDate, schoolId, studentUniqueId, calendarCode, schoolYear, educationOrganizationId, graduationPlanTypeDescriptor, graduationSchoolYear, classOfSchoolYear, entryGradeLevelReasonDescriptor, entryTypeDescriptor, exitWithdrawTypeDescriptor, entryGradeLevelDescriptor, residencyStatusDescriptor, employedWhileEnrolled, exitWithdrawDate, id, primarySchool, repeatGradeIndicator, schoolChoiceTransfer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EdFiStudentSchoolAssociation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStudentSchoolAssociationsById */
    private com.squareup.okhttp.Call getStudentSchoolAssociationsByIdCall(String id, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStudentSchoolAssociationsById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentSchoolAssociations/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null)
        localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return EdFiStudentSchoolAssociation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EdFiStudentSchoolAssociation getStudentSchoolAssociationsById(String id, String ifNoneMatch) throws ApiException {
        ApiResponse<EdFiStudentSchoolAssociation> resp = getStudentSchoolAssociationsByIdWithHttpInfo(id, ifNoneMatch);
        return resp.getData();
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return ApiResponse&lt;EdFiStudentSchoolAssociation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EdFiStudentSchoolAssociation> getStudentSchoolAssociationsByIdWithHttpInfo(String id, String ifNoneMatch) throws ApiException {
        com.squareup.okhttp.Call call = getStudentSchoolAssociationsByIdCall(id, ifNoneMatch, null, null);
        Type localVarReturnType = new TypeToken<EdFiStudentSchoolAssociation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). (asynchronously)
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStudentSchoolAssociationsByIdAsync(String id, String ifNoneMatch, final ApiCallback<EdFiStudentSchoolAssociation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStudentSchoolAssociationsByIdCall(id, ifNoneMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EdFiStudentSchoolAssociation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postStudentSchoolAssociation */
    private com.squareup.okhttp.Call postStudentSchoolAssociationCall(EdFiStudentSchoolAssociation studentSchoolAssociation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = studentSchoolAssociation;
        
        // verify the required parameter 'studentSchoolAssociation' is set
        if (studentSchoolAssociation == null) {
            throw new ApiException("Missing the required parameter 'studentSchoolAssociation' when calling postStudentSchoolAssociation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentSchoolAssociations".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource.
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param studentSchoolAssociation The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postStudentSchoolAssociation(EdFiStudentSchoolAssociation studentSchoolAssociation) throws ApiException {
        postStudentSchoolAssociationWithHttpInfo(studentSchoolAssociation);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource.
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param studentSchoolAssociation The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postStudentSchoolAssociationWithHttpInfo(EdFiStudentSchoolAssociation studentSchoolAssociation) throws ApiException {
        com.squareup.okhttp.Call call = postStudentSchoolAssociationCall(studentSchoolAssociation, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource. (asynchronously)
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param studentSchoolAssociation The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postStudentSchoolAssociationAsync(EdFiStudentSchoolAssociation studentSchoolAssociation, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postStudentSchoolAssociationCall(studentSchoolAssociation, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for putStudentSchoolAssociation */
    private com.squareup.okhttp.Call putStudentSchoolAssociationCall(String id, EdFiStudentSchoolAssociation studentSchoolAssociation, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = studentSchoolAssociation;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putStudentSchoolAssociation(Async)");
        }
        
        // verify the required parameter 'studentSchoolAssociation' is set
        if (studentSchoolAssociation == null) {
            throw new ApiException("Missing the required parameter 'studentSchoolAssociation' when calling putStudentSchoolAssociation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentSchoolAssociations/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates or creates a resource based on the resource identifier.
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param studentSchoolAssociation The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putStudentSchoolAssociation(String id, EdFiStudentSchoolAssociation studentSchoolAssociation, String ifMatch) throws ApiException {
        putStudentSchoolAssociationWithHttpInfo(id, studentSchoolAssociation, ifMatch);
    }

    /**
     * Updates or creates a resource based on the resource identifier.
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param studentSchoolAssociation The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putStudentSchoolAssociationWithHttpInfo(String id, EdFiStudentSchoolAssociation studentSchoolAssociation, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = putStudentSchoolAssociationCall(id, studentSchoolAssociation, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates or creates a resource based on the resource identifier. (asynchronously)
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param studentSchoolAssociation The JSON representation of the \&quot;studentSchoolAssociation\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putStudentSchoolAssociationAsync(String id, EdFiStudentSchoolAssociation studentSchoolAssociation, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putStudentSchoolAssociationCall(id, studentSchoolAssociation, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
