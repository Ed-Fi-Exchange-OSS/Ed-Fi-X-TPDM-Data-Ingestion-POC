/**
 * Ed-Fi Operational Data Store API
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.edfi.api.resource;

import org.edfi.api.ApiCallback;
import org.edfi.api.ApiClient;
import org.edfi.api.ApiException;
import org.edfi.api.ApiResponse;
import org.edfi.api.Configuration;
import org.edfi.api.Pair;
import org.edfi.api.ProgressRequestBody;
import org.edfi.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import org.edfi.model.resource.EdFiStudentMigrantEducationProgramAssociation;
import org.joda.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StudentMigrantEducationProgramAssociationsApi {
    private ApiClient apiClient;

    public StudentMigrantEducationProgramAssociationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StudentMigrantEducationProgramAssociationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteStudentMigrantEducationProgramAssociationById */
    private com.squareup.okhttp.Call deleteStudentMigrantEducationProgramAssociationByIdCall(String id, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteStudentMigrantEducationProgramAssociationById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentMigrantEducationProgramAssociations/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Deletes an existing resource using the resource identifier.
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStudentMigrantEducationProgramAssociationById(String id, String ifMatch) throws ApiException {
        deleteStudentMigrantEducationProgramAssociationByIdWithHttpInfo(id, ifMatch);
    }

    /**
     * Deletes an existing resource using the resource identifier.
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStudentMigrantEducationProgramAssociationByIdWithHttpInfo(String id, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = deleteStudentMigrantEducationProgramAssociationByIdCall(id, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes an existing resource using the resource identifier. (asynchronously)
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStudentMigrantEducationProgramAssociationByIdAsync(String id, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStudentMigrantEducationProgramAssociationByIdCall(id, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getStudentMigrantEducationProgramAssociations */
    private com.squareup.okhttp.Call getStudentMigrantEducationProgramAssociationsCall(Integer offset, Integer limit, Boolean totalCount, LocalDate beginDate, Integer educationOrganizationId, Integer programEducationOrganizationId, String programName, String programTypeDescriptor, String studentUniqueId, String continuationOfServicesReasonDescriptor, LocalDate eligibilityExpirationDate, LocalDate lastQualifyingMove, Boolean priorityForServices, LocalDate qualifyingArrivalDate, LocalDate stateResidencyDate, LocalDate usInitialEntry, LocalDate usInitialSchoolEntry, LocalDate usMostRecentEntry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentMigrantEducationProgramAssociations".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (totalCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalCount", totalCount));
        if (beginDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "beginDate", beginDate));
        if (educationOrganizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "educationOrganizationId", educationOrganizationId));
        if (programEducationOrganizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "programEducationOrganizationId", programEducationOrganizationId));
        if (programName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "programName", programName));
        if (programTypeDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "programTypeDescriptor", programTypeDescriptor));
        if (studentUniqueId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "studentUniqueId", studentUniqueId));
        if (continuationOfServicesReasonDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "continuationOfServicesReasonDescriptor", continuationOfServicesReasonDescriptor));
        if (eligibilityExpirationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "eligibilityExpirationDate", eligibilityExpirationDate));
        if (lastQualifyingMove != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastQualifyingMove", lastQualifyingMove));
        if (priorityForServices != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "priorityForServices", priorityForServices));
        if (qualifyingArrivalDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "qualifyingArrivalDate", qualifyingArrivalDate));
        if (stateResidencyDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "stateResidencyDate", stateResidencyDate));
        if (usInitialEntry != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "usInitialEntry", usInitialEntry));
        if (usInitialSchoolEntry != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "usInitialSchoolEntry", usInitialSchoolEntry));
        if (usMostRecentEntry != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "usMostRecentEntry", usMostRecentEntry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param beginDate The month, day, and year on which the Student first received services. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param programEducationOrganizationId The identifier assigned to an education organization. (optional)
     * @param programName The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param programTypeDescriptor The type of program. (optional)
     * @param studentUniqueId A unique alphanumeric code assigned to a student. (optional)
     * @param continuationOfServicesReasonDescriptor The \&quot;continuation of services\&quot; provision found in Section 1304(e) of the statute provides that (1) a child who ceases to be a migratory child during a school term shall be eligible for services until the end of such term; (2) a child who is no longer a migratory child may continue to receive services for one additional school year, but only if comparable services are not available through other programs; and (3) secondary school students who were eligible for services in secondary school may continue to be served through credit accrual programs until graduation. Only students who received services at any time during their 36 month eligibility period may continue to receive services (not necessarily the same service). (optional)
     * @param eligibilityExpirationDate The Eligibility Expiration Date is used to determine end of eligibility and to account for a child&#39;s eligibility expiring earlier than 36 months from the child&#39;s QAD. A child&#39;s eligibility would end earlier than 36 months from the child&#39;s QAD, if the child is no longer entitled to a free public education (e.g., graduated with a high school diploma, obtained a high school equivalency diploma (HSED), or for other reasons as determined by States&#39; requirements), or if the child passes away. (optional)
     * @param lastQualifyingMove Date the last qualifying move occurred; used to compute MEP status. (optional)
     * @param priorityForServices Report migratory children who are classified as having \&quot;priority for services\&quot; because they are failing, or most at risk of failing to meet the State&#39;s challenging State academic content standards and challenging State student academic achievement standards, and their education has been interrupted during the regular school year. (optional)
     * @param qualifyingArrivalDate The Qualifying Arrival Date (QAD) is the date the child joins the worker who has already moved, or the date when the worker joins the child who has already moved. The QAD is the date that the child&#39;s eligibility for the MEP begins. The QAD is not affected by subsequent non-qualifying moves. (optional)
     * @param stateResidencyDate The verified State residency for the student. (optional)
     * @param usInitialEntry The month, day, and year on which the Student first entered the U.S. (optional)
     * @param usInitialSchoolEntry The month, day, and year on which the Student first entered a U.S. school. (optional)
     * @param usMostRecentEntry The month, day, and year of the Student&#39;s most recent entry into the U.S. (optional)
     * @return List&lt;EdFiStudentMigrantEducationProgramAssociation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EdFiStudentMigrantEducationProgramAssociation> getStudentMigrantEducationProgramAssociations(Integer offset, Integer limit, Boolean totalCount, LocalDate beginDate, Integer educationOrganizationId, Integer programEducationOrganizationId, String programName, String programTypeDescriptor, String studentUniqueId, String continuationOfServicesReasonDescriptor, LocalDate eligibilityExpirationDate, LocalDate lastQualifyingMove, Boolean priorityForServices, LocalDate qualifyingArrivalDate, LocalDate stateResidencyDate, LocalDate usInitialEntry, LocalDate usInitialSchoolEntry, LocalDate usMostRecentEntry) throws ApiException {
        ApiResponse<List<EdFiStudentMigrantEducationProgramAssociation>> resp = getStudentMigrantEducationProgramAssociationsWithHttpInfo(offset, limit, totalCount, beginDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, continuationOfServicesReasonDescriptor, eligibilityExpirationDate, lastQualifyingMove, priorityForServices, qualifyingArrivalDate, stateResidencyDate, usInitialEntry, usInitialSchoolEntry, usMostRecentEntry);
        return resp.getData();
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param beginDate The month, day, and year on which the Student first received services. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param programEducationOrganizationId The identifier assigned to an education organization. (optional)
     * @param programName The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param programTypeDescriptor The type of program. (optional)
     * @param studentUniqueId A unique alphanumeric code assigned to a student. (optional)
     * @param continuationOfServicesReasonDescriptor The \&quot;continuation of services\&quot; provision found in Section 1304(e) of the statute provides that (1) a child who ceases to be a migratory child during a school term shall be eligible for services until the end of such term; (2) a child who is no longer a migratory child may continue to receive services for one additional school year, but only if comparable services are not available through other programs; and (3) secondary school students who were eligible for services in secondary school may continue to be served through credit accrual programs until graduation. Only students who received services at any time during their 36 month eligibility period may continue to receive services (not necessarily the same service). (optional)
     * @param eligibilityExpirationDate The Eligibility Expiration Date is used to determine end of eligibility and to account for a child&#39;s eligibility expiring earlier than 36 months from the child&#39;s QAD. A child&#39;s eligibility would end earlier than 36 months from the child&#39;s QAD, if the child is no longer entitled to a free public education (e.g., graduated with a high school diploma, obtained a high school equivalency diploma (HSED), or for other reasons as determined by States&#39; requirements), or if the child passes away. (optional)
     * @param lastQualifyingMove Date the last qualifying move occurred; used to compute MEP status. (optional)
     * @param priorityForServices Report migratory children who are classified as having \&quot;priority for services\&quot; because they are failing, or most at risk of failing to meet the State&#39;s challenging State academic content standards and challenging State student academic achievement standards, and their education has been interrupted during the regular school year. (optional)
     * @param qualifyingArrivalDate The Qualifying Arrival Date (QAD) is the date the child joins the worker who has already moved, or the date when the worker joins the child who has already moved. The QAD is the date that the child&#39;s eligibility for the MEP begins. The QAD is not affected by subsequent non-qualifying moves. (optional)
     * @param stateResidencyDate The verified State residency for the student. (optional)
     * @param usInitialEntry The month, day, and year on which the Student first entered the U.S. (optional)
     * @param usInitialSchoolEntry The month, day, and year on which the Student first entered a U.S. school. (optional)
     * @param usMostRecentEntry The month, day, and year of the Student&#39;s most recent entry into the U.S. (optional)
     * @return ApiResponse&lt;List&lt;EdFiStudentMigrantEducationProgramAssociation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EdFiStudentMigrantEducationProgramAssociation>> getStudentMigrantEducationProgramAssociationsWithHttpInfo(Integer offset, Integer limit, Boolean totalCount, LocalDate beginDate, Integer educationOrganizationId, Integer programEducationOrganizationId, String programName, String programTypeDescriptor, String studentUniqueId, String continuationOfServicesReasonDescriptor, LocalDate eligibilityExpirationDate, LocalDate lastQualifyingMove, Boolean priorityForServices, LocalDate qualifyingArrivalDate, LocalDate stateResidencyDate, LocalDate usInitialEntry, LocalDate usInitialSchoolEntry, LocalDate usMostRecentEntry) throws ApiException {
        com.squareup.okhttp.Call call = getStudentMigrantEducationProgramAssociationsCall(offset, limit, totalCount, beginDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, continuationOfServicesReasonDescriptor, eligibilityExpirationDate, lastQualifyingMove, priorityForServices, qualifyingArrivalDate, stateResidencyDate, usInitialEntry, usInitialSchoolEntry, usMostRecentEntry, null, null);
        Type localVarReturnType = new TypeToken<List<EdFiStudentMigrantEducationProgramAssociation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). (asynchronously)
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param beginDate The month, day, and year on which the Student first received services. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param programEducationOrganizationId The identifier assigned to an education organization. (optional)
     * @param programName The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param programTypeDescriptor The type of program. (optional)
     * @param studentUniqueId A unique alphanumeric code assigned to a student. (optional)
     * @param continuationOfServicesReasonDescriptor The \&quot;continuation of services\&quot; provision found in Section 1304(e) of the statute provides that (1) a child who ceases to be a migratory child during a school term shall be eligible for services until the end of such term; (2) a child who is no longer a migratory child may continue to receive services for one additional school year, but only if comparable services are not available through other programs; and (3) secondary school students who were eligible for services in secondary school may continue to be served through credit accrual programs until graduation. Only students who received services at any time during their 36 month eligibility period may continue to receive services (not necessarily the same service). (optional)
     * @param eligibilityExpirationDate The Eligibility Expiration Date is used to determine end of eligibility and to account for a child&#39;s eligibility expiring earlier than 36 months from the child&#39;s QAD. A child&#39;s eligibility would end earlier than 36 months from the child&#39;s QAD, if the child is no longer entitled to a free public education (e.g., graduated with a high school diploma, obtained a high school equivalency diploma (HSED), or for other reasons as determined by States&#39; requirements), or if the child passes away. (optional)
     * @param lastQualifyingMove Date the last qualifying move occurred; used to compute MEP status. (optional)
     * @param priorityForServices Report migratory children who are classified as having \&quot;priority for services\&quot; because they are failing, or most at risk of failing to meet the State&#39;s challenging State academic content standards and challenging State student academic achievement standards, and their education has been interrupted during the regular school year. (optional)
     * @param qualifyingArrivalDate The Qualifying Arrival Date (QAD) is the date the child joins the worker who has already moved, or the date when the worker joins the child who has already moved. The QAD is the date that the child&#39;s eligibility for the MEP begins. The QAD is not affected by subsequent non-qualifying moves. (optional)
     * @param stateResidencyDate The verified State residency for the student. (optional)
     * @param usInitialEntry The month, day, and year on which the Student first entered the U.S. (optional)
     * @param usInitialSchoolEntry The month, day, and year on which the Student first entered a U.S. school. (optional)
     * @param usMostRecentEntry The month, day, and year of the Student&#39;s most recent entry into the U.S. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStudentMigrantEducationProgramAssociationsAsync(Integer offset, Integer limit, Boolean totalCount, LocalDate beginDate, Integer educationOrganizationId, Integer programEducationOrganizationId, String programName, String programTypeDescriptor, String studentUniqueId, String continuationOfServicesReasonDescriptor, LocalDate eligibilityExpirationDate, LocalDate lastQualifyingMove, Boolean priorityForServices, LocalDate qualifyingArrivalDate, LocalDate stateResidencyDate, LocalDate usInitialEntry, LocalDate usInitialSchoolEntry, LocalDate usMostRecentEntry, final ApiCallback<List<EdFiStudentMigrantEducationProgramAssociation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStudentMigrantEducationProgramAssociationsCall(offset, limit, totalCount, beginDate, educationOrganizationId, programEducationOrganizationId, programName, programTypeDescriptor, studentUniqueId, continuationOfServicesReasonDescriptor, eligibilityExpirationDate, lastQualifyingMove, priorityForServices, qualifyingArrivalDate, stateResidencyDate, usInitialEntry, usInitialSchoolEntry, usMostRecentEntry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EdFiStudentMigrantEducationProgramAssociation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStudentMigrantEducationProgramAssociationsById */
    private com.squareup.okhttp.Call getStudentMigrantEducationProgramAssociationsByIdCall(String id, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStudentMigrantEducationProgramAssociationsById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentMigrantEducationProgramAssociations/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null)
        localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return EdFiStudentMigrantEducationProgramAssociation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EdFiStudentMigrantEducationProgramAssociation getStudentMigrantEducationProgramAssociationsById(String id, String ifNoneMatch) throws ApiException {
        ApiResponse<EdFiStudentMigrantEducationProgramAssociation> resp = getStudentMigrantEducationProgramAssociationsByIdWithHttpInfo(id, ifNoneMatch);
        return resp.getData();
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return ApiResponse&lt;EdFiStudentMigrantEducationProgramAssociation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EdFiStudentMigrantEducationProgramAssociation> getStudentMigrantEducationProgramAssociationsByIdWithHttpInfo(String id, String ifNoneMatch) throws ApiException {
        com.squareup.okhttp.Call call = getStudentMigrantEducationProgramAssociationsByIdCall(id, ifNoneMatch, null, null);
        Type localVarReturnType = new TypeToken<EdFiStudentMigrantEducationProgramAssociation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). (asynchronously)
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStudentMigrantEducationProgramAssociationsByIdAsync(String id, String ifNoneMatch, final ApiCallback<EdFiStudentMigrantEducationProgramAssociation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStudentMigrantEducationProgramAssociationsByIdCall(id, ifNoneMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EdFiStudentMigrantEducationProgramAssociation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postStudentMigrantEducationProgramAssociation */
    private com.squareup.okhttp.Call postStudentMigrantEducationProgramAssociationCall(EdFiStudentMigrantEducationProgramAssociation studentMigrantEducationProgramAssociation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = studentMigrantEducationProgramAssociation;
        
        // verify the required parameter 'studentMigrantEducationProgramAssociation' is set
        if (studentMigrantEducationProgramAssociation == null) {
            throw new ApiException("Missing the required parameter 'studentMigrantEducationProgramAssociation' when calling postStudentMigrantEducationProgramAssociation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentMigrantEducationProgramAssociations".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource.
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param studentMigrantEducationProgramAssociation The JSON representation of the \&quot;studentMigrantEducationProgramAssociation\&quot; resource to be created or updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postStudentMigrantEducationProgramAssociation(EdFiStudentMigrantEducationProgramAssociation studentMigrantEducationProgramAssociation) throws ApiException {
        postStudentMigrantEducationProgramAssociationWithHttpInfo(studentMigrantEducationProgramAssociation);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource.
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param studentMigrantEducationProgramAssociation The JSON representation of the \&quot;studentMigrantEducationProgramAssociation\&quot; resource to be created or updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postStudentMigrantEducationProgramAssociationWithHttpInfo(EdFiStudentMigrantEducationProgramAssociation studentMigrantEducationProgramAssociation) throws ApiException {
        com.squareup.okhttp.Call call = postStudentMigrantEducationProgramAssociationCall(studentMigrantEducationProgramAssociation, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource. (asynchronously)
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param studentMigrantEducationProgramAssociation The JSON representation of the \&quot;studentMigrantEducationProgramAssociation\&quot; resource to be created or updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postStudentMigrantEducationProgramAssociationAsync(EdFiStudentMigrantEducationProgramAssociation studentMigrantEducationProgramAssociation, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postStudentMigrantEducationProgramAssociationCall(studentMigrantEducationProgramAssociation, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for putStudentMigrantEducationProgramAssociation */
    private com.squareup.okhttp.Call putStudentMigrantEducationProgramAssociationCall(String id, EdFiStudentMigrantEducationProgramAssociation studentMigrantEducationProgramAssociation, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = studentMigrantEducationProgramAssociation;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putStudentMigrantEducationProgramAssociation(Async)");
        }
        
        // verify the required parameter 'studentMigrantEducationProgramAssociation' is set
        if (studentMigrantEducationProgramAssociation == null) {
            throw new ApiException("Missing the required parameter 'studentMigrantEducationProgramAssociation' when calling putStudentMigrantEducationProgramAssociation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ed-fi/studentMigrantEducationProgramAssociations/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates or creates a resource based on the resource identifier.
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param studentMigrantEducationProgramAssociation The JSON representation of the \&quot;studentMigrantEducationProgramAssociation\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putStudentMigrantEducationProgramAssociation(String id, EdFiStudentMigrantEducationProgramAssociation studentMigrantEducationProgramAssociation, String ifMatch) throws ApiException {
        putStudentMigrantEducationProgramAssociationWithHttpInfo(id, studentMigrantEducationProgramAssociation, ifMatch);
    }

    /**
     * Updates or creates a resource based on the resource identifier.
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param studentMigrantEducationProgramAssociation The JSON representation of the \&quot;studentMigrantEducationProgramAssociation\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putStudentMigrantEducationProgramAssociationWithHttpInfo(String id, EdFiStudentMigrantEducationProgramAssociation studentMigrantEducationProgramAssociation, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = putStudentMigrantEducationProgramAssociationCall(id, studentMigrantEducationProgramAssociation, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates or creates a resource based on the resource identifier. (asynchronously)
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param studentMigrantEducationProgramAssociation The JSON representation of the \&quot;studentMigrantEducationProgramAssociation\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putStudentMigrantEducationProgramAssociationAsync(String id, EdFiStudentMigrantEducationProgramAssociation studentMigrantEducationProgramAssociation, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putStudentMigrantEducationProgramAssociationCall(id, studentMigrantEducationProgramAssociation, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
