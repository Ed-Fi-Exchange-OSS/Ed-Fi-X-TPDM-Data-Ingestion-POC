/**
 * Ed-Fi Operational Data Store API
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.edfi.api.resource;

import org.edfi.api.ApiCallback;
import org.edfi.api.ApiClient;
import org.edfi.api.ApiException;
import org.edfi.api.ApiResponse;
import org.edfi.api.Configuration;
import org.edfi.api.Pair;
import org.edfi.api.ProgressRequestBody;
import org.edfi.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import org.edfi.model.resource.TpdmApplicant;
import org.joda.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicantsApi {
    private ApiClient apiClient;

    public ApplicantsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicantsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteApplicantById */
    private com.squareup.okhttp.Call deleteApplicantByIdCall(String id, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteApplicantById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tpdm/applicants/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Deletes an existing resource using the resource identifier.
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteApplicantById(String id, String ifMatch) throws ApiException {
        deleteApplicantByIdWithHttpInfo(id, ifMatch);
    }

    /**
     * Deletes an existing resource using the resource identifier.
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteApplicantByIdWithHttpInfo(String id, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = deleteApplicantByIdCall(id, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes an existing resource using the resource identifier. (asynchronously)
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteApplicantByIdAsync(String id, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteApplicantByIdCall(id, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getApplicants */
    private com.squareup.okhttp.Call getApplicantsCall(Integer offset, Integer limit, Boolean totalCount, String applicantIdentifier, Integer educationOrganizationId, String teacherCandidateIdentifier, String highlyQualifiedAcademicSubjectDescriptor, String citizenshipStatusDescriptor, String genderDescriptor, String highestCompletedLevelOfEducationDescriptor, String sexDescriptor, LocalDate birthDate, Boolean economicDisadvantaged, Boolean firstGenerationStudent, String firstName, String generationCodeSuffix, Boolean highlyQualifiedTeacher, Boolean hispanicLatinoEthnicity, String id, String lastSurname, String loginId, String maidenName, String middleName, String personalTitlePrefix, Double yearsOfPriorProfessionalExperience, Double yearsOfPriorTeachingExperience, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/tpdm/applicants".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (totalCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalCount", totalCount));
        if (applicantIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "applicantIdentifier", applicantIdentifier));
        if (educationOrganizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "educationOrganizationId", educationOrganizationId));
        if (teacherCandidateIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "teacherCandidateIdentifier", teacherCandidateIdentifier));
        if (highlyQualifiedAcademicSubjectDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "highlyQualifiedAcademicSubjectDescriptor", highlyQualifiedAcademicSubjectDescriptor));
        if (citizenshipStatusDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "citizenshipStatusDescriptor", citizenshipStatusDescriptor));
        if (genderDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "genderDescriptor", genderDescriptor));
        if (highestCompletedLevelOfEducationDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "highestCompletedLevelOfEducationDescriptor", highestCompletedLevelOfEducationDescriptor));
        if (sexDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sexDescriptor", sexDescriptor));
        if (birthDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "birthDate", birthDate));
        if (economicDisadvantaged != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "economicDisadvantaged", economicDisadvantaged));
        if (firstGenerationStudent != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstGenerationStudent", firstGenerationStudent));
        if (firstName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstName", firstName));
        if (generationCodeSuffix != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "generationCodeSuffix", generationCodeSuffix));
        if (highlyQualifiedTeacher != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "highlyQualifiedTeacher", highlyQualifiedTeacher));
        if (hispanicLatinoEthnicity != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hispanicLatinoEthnicity", hispanicLatinoEthnicity));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "id", id));
        if (lastSurname != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastSurname", lastSurname));
        if (loginId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "loginId", loginId));
        if (maidenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maidenName", maidenName));
        if (middleName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "middleName", middleName));
        if (personalTitlePrefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "personalTitlePrefix", personalTitlePrefix));
        if (yearsOfPriorProfessionalExperience != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yearsOfPriorProfessionalExperience", yearsOfPriorProfessionalExperience));
        if (yearsOfPriorTeachingExperience != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yearsOfPriorTeachingExperience", yearsOfPriorTeachingExperience));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param applicantIdentifier Identifier assigned to a person making formal application for an open staff position. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param teacherCandidateIdentifier A unique alphanumeric code assigned to a teacher candidate. (optional)
     * @param highlyQualifiedAcademicSubjectDescriptor The academic subject(s) in which the staff is deemed to be \&quot;highly qualified\&quot;. (optional)
     * @param citizenshipStatusDescriptor An indicator of whether or not the person is a U.S. citizen. (optional)
     * @param genderDescriptor The gender with which a person associates. (optional)
     * @param highestCompletedLevelOfEducationDescriptor The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)
     * @param sexDescriptor A person&#39;s gender. (optional)
     * @param birthDate The month, day, and year on which an individual was born. (optional)
     * @param economicDisadvantaged An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)
     * @param firstGenerationStudent Indicator of whether individual is a first generation college student. (optional)
     * @param firstName A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)
     * @param generationCodeSuffix An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)
     * @param highlyQualifiedTeacher An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)
     * @param hispanicLatinoEthnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;. (optional)
     * @param id  (optional)
     * @param lastSurname The name borne in common by members of a family. (optional)
     * @param loginId The login ID for the user; used for security access control interface. (optional)
     * @param maidenName The person&#39;s maiden name. (optional)
     * @param middleName A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)
     * @param personalTitlePrefix A prefix used to denote the title, degree, position, or seniority of the person. (optional)
     * @param yearsOfPriorProfessionalExperience The total number of years that an individual has previously held a similar professional position in one or more education institutions. (optional)
     * @param yearsOfPriorTeachingExperience The total number of years that an individual has previously held a teaching position in one or more education institutions. (optional)
     * @return List&lt;TpdmApplicant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TpdmApplicant> getApplicants(Integer offset, Integer limit, Boolean totalCount, String applicantIdentifier, Integer educationOrganizationId, String teacherCandidateIdentifier, String highlyQualifiedAcademicSubjectDescriptor, String citizenshipStatusDescriptor, String genderDescriptor, String highestCompletedLevelOfEducationDescriptor, String sexDescriptor, LocalDate birthDate, Boolean economicDisadvantaged, Boolean firstGenerationStudent, String firstName, String generationCodeSuffix, Boolean highlyQualifiedTeacher, Boolean hispanicLatinoEthnicity, String id, String lastSurname, String loginId, String maidenName, String middleName, String personalTitlePrefix, Double yearsOfPriorProfessionalExperience, Double yearsOfPriorTeachingExperience) throws ApiException {
        ApiResponse<List<TpdmApplicant>> resp = getApplicantsWithHttpInfo(offset, limit, totalCount, applicantIdentifier, educationOrganizationId, teacherCandidateIdentifier, highlyQualifiedAcademicSubjectDescriptor, citizenshipStatusDescriptor, genderDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, birthDate, economicDisadvantaged, firstGenerationStudent, firstName, generationCodeSuffix, highlyQualifiedTeacher, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, yearsOfPriorProfessionalExperience, yearsOfPriorTeachingExperience);
        return resp.getData();
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param applicantIdentifier Identifier assigned to a person making formal application for an open staff position. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param teacherCandidateIdentifier A unique alphanumeric code assigned to a teacher candidate. (optional)
     * @param highlyQualifiedAcademicSubjectDescriptor The academic subject(s) in which the staff is deemed to be \&quot;highly qualified\&quot;. (optional)
     * @param citizenshipStatusDescriptor An indicator of whether or not the person is a U.S. citizen. (optional)
     * @param genderDescriptor The gender with which a person associates. (optional)
     * @param highestCompletedLevelOfEducationDescriptor The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)
     * @param sexDescriptor A person&#39;s gender. (optional)
     * @param birthDate The month, day, and year on which an individual was born. (optional)
     * @param economicDisadvantaged An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)
     * @param firstGenerationStudent Indicator of whether individual is a first generation college student. (optional)
     * @param firstName A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)
     * @param generationCodeSuffix An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)
     * @param highlyQualifiedTeacher An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)
     * @param hispanicLatinoEthnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;. (optional)
     * @param id  (optional)
     * @param lastSurname The name borne in common by members of a family. (optional)
     * @param loginId The login ID for the user; used for security access control interface. (optional)
     * @param maidenName The person&#39;s maiden name. (optional)
     * @param middleName A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)
     * @param personalTitlePrefix A prefix used to denote the title, degree, position, or seniority of the person. (optional)
     * @param yearsOfPriorProfessionalExperience The total number of years that an individual has previously held a similar professional position in one or more education institutions. (optional)
     * @param yearsOfPriorTeachingExperience The total number of years that an individual has previously held a teaching position in one or more education institutions. (optional)
     * @return ApiResponse&lt;List&lt;TpdmApplicant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TpdmApplicant>> getApplicantsWithHttpInfo(Integer offset, Integer limit, Boolean totalCount, String applicantIdentifier, Integer educationOrganizationId, String teacherCandidateIdentifier, String highlyQualifiedAcademicSubjectDescriptor, String citizenshipStatusDescriptor, String genderDescriptor, String highestCompletedLevelOfEducationDescriptor, String sexDescriptor, LocalDate birthDate, Boolean economicDisadvantaged, Boolean firstGenerationStudent, String firstName, String generationCodeSuffix, Boolean highlyQualifiedTeacher, Boolean hispanicLatinoEthnicity, String id, String lastSurname, String loginId, String maidenName, String middleName, String personalTitlePrefix, Double yearsOfPriorProfessionalExperience, Double yearsOfPriorTeachingExperience) throws ApiException {
        com.squareup.okhttp.Call call = getApplicantsCall(offset, limit, totalCount, applicantIdentifier, educationOrganizationId, teacherCandidateIdentifier, highlyQualifiedAcademicSubjectDescriptor, citizenshipStatusDescriptor, genderDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, birthDate, economicDisadvantaged, firstGenerationStudent, firstName, generationCodeSuffix, highlyQualifiedTeacher, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, yearsOfPriorProfessionalExperience, yearsOfPriorTeachingExperience, null, null);
        Type localVarReturnType = new TypeToken<List<TpdmApplicant>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). (asynchronously)
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param applicantIdentifier Identifier assigned to a person making formal application for an open staff position. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param teacherCandidateIdentifier A unique alphanumeric code assigned to a teacher candidate. (optional)
     * @param highlyQualifiedAcademicSubjectDescriptor The academic subject(s) in which the staff is deemed to be \&quot;highly qualified\&quot;. (optional)
     * @param citizenshipStatusDescriptor An indicator of whether or not the person is a U.S. citizen. (optional)
     * @param genderDescriptor The gender with which a person associates. (optional)
     * @param highestCompletedLevelOfEducationDescriptor The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)
     * @param sexDescriptor A person&#39;s gender. (optional)
     * @param birthDate The month, day, and year on which an individual was born. (optional)
     * @param economicDisadvantaged An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)
     * @param firstGenerationStudent Indicator of whether individual is a first generation college student. (optional)
     * @param firstName A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)
     * @param generationCodeSuffix An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)
     * @param highlyQualifiedTeacher An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)
     * @param hispanicLatinoEthnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;. (optional)
     * @param id  (optional)
     * @param lastSurname The name borne in common by members of a family. (optional)
     * @param loginId The login ID for the user; used for security access control interface. (optional)
     * @param maidenName The person&#39;s maiden name. (optional)
     * @param middleName A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)
     * @param personalTitlePrefix A prefix used to denote the title, degree, position, or seniority of the person. (optional)
     * @param yearsOfPriorProfessionalExperience The total number of years that an individual has previously held a similar professional position in one or more education institutions. (optional)
     * @param yearsOfPriorTeachingExperience The total number of years that an individual has previously held a teaching position in one or more education institutions. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicantsAsync(Integer offset, Integer limit, Boolean totalCount, String applicantIdentifier, Integer educationOrganizationId, String teacherCandidateIdentifier, String highlyQualifiedAcademicSubjectDescriptor, String citizenshipStatusDescriptor, String genderDescriptor, String highestCompletedLevelOfEducationDescriptor, String sexDescriptor, LocalDate birthDate, Boolean economicDisadvantaged, Boolean firstGenerationStudent, String firstName, String generationCodeSuffix, Boolean highlyQualifiedTeacher, Boolean hispanicLatinoEthnicity, String id, String lastSurname, String loginId, String maidenName, String middleName, String personalTitlePrefix, Double yearsOfPriorProfessionalExperience, Double yearsOfPriorTeachingExperience, final ApiCallback<List<TpdmApplicant>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicantsCall(offset, limit, totalCount, applicantIdentifier, educationOrganizationId, teacherCandidateIdentifier, highlyQualifiedAcademicSubjectDescriptor, citizenshipStatusDescriptor, genderDescriptor, highestCompletedLevelOfEducationDescriptor, sexDescriptor, birthDate, economicDisadvantaged, firstGenerationStudent, firstName, generationCodeSuffix, highlyQualifiedTeacher, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, personalTitlePrefix, yearsOfPriorProfessionalExperience, yearsOfPriorTeachingExperience, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TpdmApplicant>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getApplicantsById */
    private com.squareup.okhttp.Call getApplicantsByIdCall(String id, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getApplicantsById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tpdm/applicants/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null)
        localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return TpdmApplicant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TpdmApplicant getApplicantsById(String id, String ifNoneMatch) throws ApiException {
        ApiResponse<TpdmApplicant> resp = getApplicantsByIdWithHttpInfo(id, ifNoneMatch);
        return resp.getData();
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return ApiResponse&lt;TpdmApplicant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TpdmApplicant> getApplicantsByIdWithHttpInfo(String id, String ifNoneMatch) throws ApiException {
        com.squareup.okhttp.Call call = getApplicantsByIdCall(id, ifNoneMatch, null, null);
        Type localVarReturnType = new TypeToken<TpdmApplicant>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). (asynchronously)
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicantsByIdAsync(String id, String ifNoneMatch, final ApiCallback<TpdmApplicant> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicantsByIdCall(id, ifNoneMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TpdmApplicant>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postApplicant */
    private com.squareup.okhttp.Call postApplicantCall(TpdmApplicant applicant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = applicant;
        
        // verify the required parameter 'applicant' is set
        if (applicant == null) {
            throw new ApiException("Missing the required parameter 'applicant' when calling postApplicant(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tpdm/applicants".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource.
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param applicant The JSON representation of the \&quot;applicant\&quot; resource to be created or updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postApplicant(TpdmApplicant applicant) throws ApiException {
        postApplicantWithHttpInfo(applicant);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource.
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param applicant The JSON representation of the \&quot;applicant\&quot; resource to be created or updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postApplicantWithHttpInfo(TpdmApplicant applicant) throws ApiException {
        com.squareup.okhttp.Call call = postApplicantCall(applicant, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource. (asynchronously)
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param applicant The JSON representation of the \&quot;applicant\&quot; resource to be created or updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postApplicantAsync(TpdmApplicant applicant, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postApplicantCall(applicant, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for putApplicant */
    private com.squareup.okhttp.Call putApplicantCall(String id, TpdmApplicant applicant, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = applicant;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putApplicant(Async)");
        }
        
        // verify the required parameter 'applicant' is set
        if (applicant == null) {
            throw new ApiException("Missing the required parameter 'applicant' when calling putApplicant(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tpdm/applicants/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates or creates a resource based on the resource identifier.
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param applicant The JSON representation of the \&quot;applicant\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putApplicant(String id, TpdmApplicant applicant, String ifMatch) throws ApiException {
        putApplicantWithHttpInfo(id, applicant, ifMatch);
    }

    /**
     * Updates or creates a resource based on the resource identifier.
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param applicant The JSON representation of the \&quot;applicant\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putApplicantWithHttpInfo(String id, TpdmApplicant applicant, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = putApplicantCall(id, applicant, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates or creates a resource based on the resource identifier. (asynchronously)
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param applicant The JSON representation of the \&quot;applicant\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putApplicantAsync(String id, TpdmApplicant applicant, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putApplicantCall(id, applicant, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
