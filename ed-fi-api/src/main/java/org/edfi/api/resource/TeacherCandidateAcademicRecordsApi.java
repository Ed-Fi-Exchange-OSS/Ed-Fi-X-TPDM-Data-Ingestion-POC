/**
 * Ed-Fi Operational Data Store API
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.edfi.api.resource;

import org.edfi.api.ApiCallback;
import org.edfi.api.ApiClient;
import org.edfi.api.ApiException;
import org.edfi.api.ApiResponse;
import org.edfi.api.Configuration;
import org.edfi.api.Pair;
import org.edfi.api.ProgressRequestBody;
import org.edfi.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import org.edfi.model.resource.TpdmTeacherCandidateAcademicRecord;
import org.joda.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeacherCandidateAcademicRecordsApi {
    private ApiClient apiClient;

    public TeacherCandidateAcademicRecordsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeacherCandidateAcademicRecordsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteTeacherCandidateAcademicRecordById */
    private com.squareup.okhttp.Call deleteTeacherCandidateAcademicRecordByIdCall(String id, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTeacherCandidateAcademicRecordById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tpdm/teacherCandidateAcademicRecords/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Deletes an existing resource using the resource identifier.
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTeacherCandidateAcademicRecordById(String id, String ifMatch) throws ApiException {
        deleteTeacherCandidateAcademicRecordByIdWithHttpInfo(id, ifMatch);
    }

    /**
     * Deletes an existing resource using the resource identifier.
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTeacherCandidateAcademicRecordByIdWithHttpInfo(String id, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = deleteTeacherCandidateAcademicRecordByIdCall(id, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes an existing resource using the resource identifier. (asynchronously)
     * The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifMatch The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTeacherCandidateAcademicRecordByIdAsync(String id, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTeacherCandidateAcademicRecordByIdCall(id, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getTeacherCandidateAcademicRecords */
    private com.squareup.okhttp.Call getTeacherCandidateAcademicRecordsCall(Integer offset, Integer limit, Boolean totalCount, String termDescriptor, Integer educationOrganizationId, Integer schoolYear, String teacherCandidateIdentifier, String cumulativeEarnedCreditTypeDescriptor, String cumulativeAttemptedCreditTypeDescriptor, String sessionEarnedCreditTypeDescriptor, String sessionAttemptedCreditTypeDescriptor, String programGatewayDescriptor, String tppDegreeTypeDescriptor, Double contentGradePointAverage, Double contentGradePointEarned, Double cumulativeAttemptedCreditConversion, Double cumulativeAttemptedCredits, Double cumulativeEarnedCreditConversion, Double cumulativeEarnedCredits, Double cumulativeGradePointAverage, Double cumulativeGradePointsEarned, String gradeValueQualifier, String id, LocalDate projectedGraduationDate, Double sessionAttemptedCreditConversion, Double sessionAttemptedCredits, Double sessionEarnedCreditConversion, Double sessionEarnedCredits, Double sessionGradePointAverage, Double sessionGradePointsEarned, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/tpdm/teacherCandidateAcademicRecords".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (totalCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalCount", totalCount));
        if (termDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "termDescriptor", termDescriptor));
        if (educationOrganizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "educationOrganizationId", educationOrganizationId));
        if (schoolYear != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "schoolYear", schoolYear));
        if (teacherCandidateIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "teacherCandidateIdentifier", teacherCandidateIdentifier));
        if (cumulativeEarnedCreditTypeDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cumulativeEarnedCreditTypeDescriptor", cumulativeEarnedCreditTypeDescriptor));
        if (cumulativeAttemptedCreditTypeDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cumulativeAttemptedCreditTypeDescriptor", cumulativeAttemptedCreditTypeDescriptor));
        if (sessionEarnedCreditTypeDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sessionEarnedCreditTypeDescriptor", sessionEarnedCreditTypeDescriptor));
        if (sessionAttemptedCreditTypeDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sessionAttemptedCreditTypeDescriptor", sessionAttemptedCreditTypeDescriptor));
        if (programGatewayDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "programGatewayDescriptor", programGatewayDescriptor));
        if (tppDegreeTypeDescriptor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tppDegreeTypeDescriptor", tppDegreeTypeDescriptor));
        if (contentGradePointAverage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "contentGradePointAverage", contentGradePointAverage));
        if (contentGradePointEarned != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "contentGradePointEarned", contentGradePointEarned));
        if (cumulativeAttemptedCreditConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cumulativeAttemptedCreditConversion", cumulativeAttemptedCreditConversion));
        if (cumulativeAttemptedCredits != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cumulativeAttemptedCredits", cumulativeAttemptedCredits));
        if (cumulativeEarnedCreditConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cumulativeEarnedCreditConversion", cumulativeEarnedCreditConversion));
        if (cumulativeEarnedCredits != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cumulativeEarnedCredits", cumulativeEarnedCredits));
        if (cumulativeGradePointAverage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cumulativeGradePointAverage", cumulativeGradePointAverage));
        if (cumulativeGradePointsEarned != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cumulativeGradePointsEarned", cumulativeGradePointsEarned));
        if (gradeValueQualifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "gradeValueQualifier", gradeValueQualifier));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "id", id));
        if (projectedGraduationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "projectedGraduationDate", projectedGraduationDate));
        if (sessionAttemptedCreditConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sessionAttemptedCreditConversion", sessionAttemptedCreditConversion));
        if (sessionAttemptedCredits != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sessionAttemptedCredits", sessionAttemptedCredits));
        if (sessionEarnedCreditConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sessionEarnedCreditConversion", sessionEarnedCreditConversion));
        if (sessionEarnedCredits != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sessionEarnedCredits", sessionEarnedCredits));
        if (sessionGradePointAverage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sessionGradePointAverage", sessionGradePointAverage));
        if (sessionGradePointsEarned != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sessionGradePointsEarned", sessionGradePointsEarned));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param termDescriptor The term for the session during the school year. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param schoolYear The identifier for the school year. (optional)
     * @param teacherCandidateIdentifier A unique alphanumeric code assigned to a teacher candidate. (optional)
     * @param cumulativeEarnedCreditTypeDescriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param cumulativeAttemptedCreditTypeDescriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param sessionEarnedCreditTypeDescriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param sessionAttemptedCreditTypeDescriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param programGatewayDescriptor Identifies the program gateway that may be associated for continuation in the program. (optional)
     * @param tppDegreeTypeDescriptor The degree type that a teacher candidate accomplishes. (optional)
     * @param contentGradePointAverage A measure of average performance in all courses taken by an individual within a given content area during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled. (optional)
     * @param contentGradePointEarned The cumulative number of grade points an individual earns within a given content area by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled. (optional)
     * @param cumulativeAttemptedCreditConversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param cumulativeAttemptedCredits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param cumulativeEarnedCreditConversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param cumulativeEarnedCredits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param cumulativeGradePointAverage A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled. (optional)
     * @param cumulativeGradePointsEarned The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled. (optional)
     * @param gradeValueQualifier The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student&#39;s Grade Point Average (A&#x3D;4, B&#x3D;3, C&#x3D;2, D&#x3D;1 in a four-point system) or letter equivalents for percentage grades (90-100%&#x3D;A, 80-90%&#x3D;B, etc.) (optional)
     * @param id  (optional)
     * @param projectedGraduationDate The month and year the student is projected to graduate. (optional)
     * @param sessionAttemptedCreditConversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param sessionAttemptedCredits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param sessionEarnedCreditConversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param sessionEarnedCredits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param sessionGradePointAverage The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted. (optional)
     * @param sessionGradePointsEarned The number of grade points an individual earned for this session. (optional)
     * @return List&lt;TpdmTeacherCandidateAcademicRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TpdmTeacherCandidateAcademicRecord> getTeacherCandidateAcademicRecords(Integer offset, Integer limit, Boolean totalCount, String termDescriptor, Integer educationOrganizationId, Integer schoolYear, String teacherCandidateIdentifier, String cumulativeEarnedCreditTypeDescriptor, String cumulativeAttemptedCreditTypeDescriptor, String sessionEarnedCreditTypeDescriptor, String sessionAttemptedCreditTypeDescriptor, String programGatewayDescriptor, String tppDegreeTypeDescriptor, Double contentGradePointAverage, Double contentGradePointEarned, Double cumulativeAttemptedCreditConversion, Double cumulativeAttemptedCredits, Double cumulativeEarnedCreditConversion, Double cumulativeEarnedCredits, Double cumulativeGradePointAverage, Double cumulativeGradePointsEarned, String gradeValueQualifier, String id, LocalDate projectedGraduationDate, Double sessionAttemptedCreditConversion, Double sessionAttemptedCredits, Double sessionEarnedCreditConversion, Double sessionEarnedCredits, Double sessionGradePointAverage, Double sessionGradePointsEarned) throws ApiException {
        ApiResponse<List<TpdmTeacherCandidateAcademicRecord>> resp = getTeacherCandidateAcademicRecordsWithHttpInfo(offset, limit, totalCount, termDescriptor, educationOrganizationId, schoolYear, teacherCandidateIdentifier, cumulativeEarnedCreditTypeDescriptor, cumulativeAttemptedCreditTypeDescriptor, sessionEarnedCreditTypeDescriptor, sessionAttemptedCreditTypeDescriptor, programGatewayDescriptor, tppDegreeTypeDescriptor, contentGradePointAverage, contentGradePointEarned, cumulativeAttemptedCreditConversion, cumulativeAttemptedCredits, cumulativeEarnedCreditConversion, cumulativeEarnedCredits, cumulativeGradePointAverage, cumulativeGradePointsEarned, gradeValueQualifier, id, projectedGraduationDate, sessionAttemptedCreditConversion, sessionAttemptedCredits, sessionEarnedCreditConversion, sessionEarnedCredits, sessionGradePointAverage, sessionGradePointsEarned);
        return resp.getData();
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param termDescriptor The term for the session during the school year. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param schoolYear The identifier for the school year. (optional)
     * @param teacherCandidateIdentifier A unique alphanumeric code assigned to a teacher candidate. (optional)
     * @param cumulativeEarnedCreditTypeDescriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param cumulativeAttemptedCreditTypeDescriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param sessionEarnedCreditTypeDescriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param sessionAttemptedCreditTypeDescriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param programGatewayDescriptor Identifies the program gateway that may be associated for continuation in the program. (optional)
     * @param tppDegreeTypeDescriptor The degree type that a teacher candidate accomplishes. (optional)
     * @param contentGradePointAverage A measure of average performance in all courses taken by an individual within a given content area during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled. (optional)
     * @param contentGradePointEarned The cumulative number of grade points an individual earns within a given content area by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled. (optional)
     * @param cumulativeAttemptedCreditConversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param cumulativeAttemptedCredits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param cumulativeEarnedCreditConversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param cumulativeEarnedCredits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param cumulativeGradePointAverage A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled. (optional)
     * @param cumulativeGradePointsEarned The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled. (optional)
     * @param gradeValueQualifier The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student&#39;s Grade Point Average (A&#x3D;4, B&#x3D;3, C&#x3D;2, D&#x3D;1 in a four-point system) or letter equivalents for percentage grades (90-100%&#x3D;A, 80-90%&#x3D;B, etc.) (optional)
     * @param id  (optional)
     * @param projectedGraduationDate The month and year the student is projected to graduate. (optional)
     * @param sessionAttemptedCreditConversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param sessionAttemptedCredits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param sessionEarnedCreditConversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param sessionEarnedCredits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param sessionGradePointAverage The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted. (optional)
     * @param sessionGradePointsEarned The number of grade points an individual earned for this session. (optional)
     * @return ApiResponse&lt;List&lt;TpdmTeacherCandidateAcademicRecord&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TpdmTeacherCandidateAcademicRecord>> getTeacherCandidateAcademicRecordsWithHttpInfo(Integer offset, Integer limit, Boolean totalCount, String termDescriptor, Integer educationOrganizationId, Integer schoolYear, String teacherCandidateIdentifier, String cumulativeEarnedCreditTypeDescriptor, String cumulativeAttemptedCreditTypeDescriptor, String sessionEarnedCreditTypeDescriptor, String sessionAttemptedCreditTypeDescriptor, String programGatewayDescriptor, String tppDegreeTypeDescriptor, Double contentGradePointAverage, Double contentGradePointEarned, Double cumulativeAttemptedCreditConversion, Double cumulativeAttemptedCredits, Double cumulativeEarnedCreditConversion, Double cumulativeEarnedCredits, Double cumulativeGradePointAverage, Double cumulativeGradePointsEarned, String gradeValueQualifier, String id, LocalDate projectedGraduationDate, Double sessionAttemptedCreditConversion, Double sessionAttemptedCredits, Double sessionEarnedCreditConversion, Double sessionEarnedCredits, Double sessionGradePointAverage, Double sessionGradePointsEarned) throws ApiException {
        com.squareup.okhttp.Call call = getTeacherCandidateAcademicRecordsCall(offset, limit, totalCount, termDescriptor, educationOrganizationId, schoolYear, teacherCandidateIdentifier, cumulativeEarnedCreditTypeDescriptor, cumulativeAttemptedCreditTypeDescriptor, sessionEarnedCreditTypeDescriptor, sessionAttemptedCreditTypeDescriptor, programGatewayDescriptor, tppDegreeTypeDescriptor, contentGradePointAverage, contentGradePointEarned, cumulativeAttemptedCreditConversion, cumulativeAttemptedCredits, cumulativeEarnedCreditConversion, cumulativeEarnedCredits, cumulativeGradePointAverage, cumulativeGradePointsEarned, gradeValueQualifier, id, projectedGraduationDate, sessionAttemptedCreditConversion, sessionAttemptedCredits, sessionEarnedCreditConversion, sessionEarnedCredits, sessionGradePointAverage, sessionGradePointsEarned, null, null);
        Type localVarReturnType = new TypeToken<List<TpdmTeacherCandidateAcademicRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). (asynchronously)
     * This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
     * @param offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param totalCount Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param termDescriptor The term for the session during the school year. (optional)
     * @param educationOrganizationId The identifier assigned to an education organization. (optional)
     * @param schoolYear The identifier for the school year. (optional)
     * @param teacherCandidateIdentifier A unique alphanumeric code assigned to a teacher candidate. (optional)
     * @param cumulativeEarnedCreditTypeDescriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param cumulativeAttemptedCreditTypeDescriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param sessionEarnedCreditTypeDescriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param sessionAttemptedCreditTypeDescriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param programGatewayDescriptor Identifies the program gateway that may be associated for continuation in the program. (optional)
     * @param tppDegreeTypeDescriptor The degree type that a teacher candidate accomplishes. (optional)
     * @param contentGradePointAverage A measure of average performance in all courses taken by an individual within a given content area during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled. (optional)
     * @param contentGradePointEarned The cumulative number of grade points an individual earns within a given content area by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled. (optional)
     * @param cumulativeAttemptedCreditConversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param cumulativeAttemptedCredits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param cumulativeEarnedCreditConversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param cumulativeEarnedCredits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param cumulativeGradePointAverage A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled. (optional)
     * @param cumulativeGradePointsEarned The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled. (optional)
     * @param gradeValueQualifier The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student&#39;s Grade Point Average (A&#x3D;4, B&#x3D;3, C&#x3D;2, D&#x3D;1 in a four-point system) or letter equivalents for percentage grades (90-100%&#x3D;A, 80-90%&#x3D;B, etc.) (optional)
     * @param id  (optional)
     * @param projectedGraduationDate The month and year the student is projected to graduate. (optional)
     * @param sessionAttemptedCreditConversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param sessionAttemptedCredits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param sessionEarnedCreditConversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param sessionEarnedCredits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param sessionGradePointAverage The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted. (optional)
     * @param sessionGradePointsEarned The number of grade points an individual earned for this session. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTeacherCandidateAcademicRecordsAsync(Integer offset, Integer limit, Boolean totalCount, String termDescriptor, Integer educationOrganizationId, Integer schoolYear, String teacherCandidateIdentifier, String cumulativeEarnedCreditTypeDescriptor, String cumulativeAttemptedCreditTypeDescriptor, String sessionEarnedCreditTypeDescriptor, String sessionAttemptedCreditTypeDescriptor, String programGatewayDescriptor, String tppDegreeTypeDescriptor, Double contentGradePointAverage, Double contentGradePointEarned, Double cumulativeAttemptedCreditConversion, Double cumulativeAttemptedCredits, Double cumulativeEarnedCreditConversion, Double cumulativeEarnedCredits, Double cumulativeGradePointAverage, Double cumulativeGradePointsEarned, String gradeValueQualifier, String id, LocalDate projectedGraduationDate, Double sessionAttemptedCreditConversion, Double sessionAttemptedCredits, Double sessionEarnedCreditConversion, Double sessionEarnedCredits, Double sessionGradePointAverage, Double sessionGradePointsEarned, final ApiCallback<List<TpdmTeacherCandidateAcademicRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTeacherCandidateAcademicRecordsCall(offset, limit, totalCount, termDescriptor, educationOrganizationId, schoolYear, teacherCandidateIdentifier, cumulativeEarnedCreditTypeDescriptor, cumulativeAttemptedCreditTypeDescriptor, sessionEarnedCreditTypeDescriptor, sessionAttemptedCreditTypeDescriptor, programGatewayDescriptor, tppDegreeTypeDescriptor, contentGradePointAverage, contentGradePointEarned, cumulativeAttemptedCreditConversion, cumulativeAttemptedCredits, cumulativeEarnedCreditConversion, cumulativeEarnedCredits, cumulativeGradePointAverage, cumulativeGradePointsEarned, gradeValueQualifier, id, projectedGraduationDate, sessionAttemptedCreditConversion, sessionAttemptedCredits, sessionEarnedCreditConversion, sessionEarnedCredits, sessionGradePointAverage, sessionGradePointsEarned, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TpdmTeacherCandidateAcademicRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTeacherCandidateAcademicRecordsById */
    private com.squareup.okhttp.Call getTeacherCandidateAcademicRecordsByIdCall(String id, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTeacherCandidateAcademicRecordsById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tpdm/teacherCandidateAcademicRecords/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null)
        localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return TpdmTeacherCandidateAcademicRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TpdmTeacherCandidateAcademicRecord getTeacherCandidateAcademicRecordsById(String id, String ifNoneMatch) throws ApiException {
        ApiResponse<TpdmTeacherCandidateAcademicRecord> resp = getTeacherCandidateAcademicRecordsByIdWithHttpInfo(id, ifNoneMatch);
        return resp.getData();
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @return ApiResponse&lt;TpdmTeacherCandidateAcademicRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TpdmTeacherCandidateAcademicRecord> getTeacherCandidateAcademicRecordsByIdWithHttpInfo(String id, String ifNoneMatch) throws ApiException {
        com.squareup.okhttp.Call call = getTeacherCandidateAcademicRecordsByIdCall(id, ifNoneMatch, null, null);
        Type localVarReturnType = new TypeToken<TpdmTeacherCandidateAcademicRecord>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). (asynchronously)
     * This GET operation retrieves a resource by the specified resource identifier.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param ifNoneMatch The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTeacherCandidateAcademicRecordsByIdAsync(String id, String ifNoneMatch, final ApiCallback<TpdmTeacherCandidateAcademicRecord> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTeacherCandidateAcademicRecordsByIdCall(id, ifNoneMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TpdmTeacherCandidateAcademicRecord>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postTeacherCandidateAcademicRecord */
    private com.squareup.okhttp.Call postTeacherCandidateAcademicRecordCall(TpdmTeacherCandidateAcademicRecord teacherCandidateAcademicRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = teacherCandidateAcademicRecord;
        
        // verify the required parameter 'teacherCandidateAcademicRecord' is set
        if (teacherCandidateAcademicRecord == null) {
            throw new ApiException("Missing the required parameter 'teacherCandidateAcademicRecord' when calling postTeacherCandidateAcademicRecord(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tpdm/teacherCandidateAcademicRecords".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource.
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param teacherCandidateAcademicRecord The JSON representation of the \&quot;teacherCandidateAcademicRecord\&quot; resource to be created or updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postTeacherCandidateAcademicRecord(TpdmTeacherCandidateAcademicRecord teacherCandidateAcademicRecord) throws ApiException {
        postTeacherCandidateAcademicRecordWithHttpInfo(teacherCandidateAcademicRecord);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource.
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param teacherCandidateAcademicRecord The JSON representation of the \&quot;teacherCandidateAcademicRecord\&quot; resource to be created or updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postTeacherCandidateAcademicRecordWithHttpInfo(TpdmTeacherCandidateAcademicRecord teacherCandidateAcademicRecord) throws ApiException {
        com.squareup.okhttp.Call call = postTeacherCandidateAcademicRecordCall(teacherCandidateAcademicRecord, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates or updates resources based on the natural key values of the supplied resource. (asynchronously)
     * The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
     * @param teacherCandidateAcademicRecord The JSON representation of the \&quot;teacherCandidateAcademicRecord\&quot; resource to be created or updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTeacherCandidateAcademicRecordAsync(TpdmTeacherCandidateAcademicRecord teacherCandidateAcademicRecord, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTeacherCandidateAcademicRecordCall(teacherCandidateAcademicRecord, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for putTeacherCandidateAcademicRecord */
    private com.squareup.okhttp.Call putTeacherCandidateAcademicRecordCall(String id, TpdmTeacherCandidateAcademicRecord teacherCandidateAcademicRecord, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = teacherCandidateAcademicRecord;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putTeacherCandidateAcademicRecord(Async)");
        }
        
        // verify the required parameter 'teacherCandidateAcademicRecord' is set
        if (teacherCandidateAcademicRecord == null) {
            throw new ApiException("Missing the required parameter 'teacherCandidateAcademicRecord' when calling putTeacherCandidateAcademicRecord(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tpdm/teacherCandidateAcademicRecords/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2_client_credentials" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates or creates a resource based on the resource identifier.
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param teacherCandidateAcademicRecord The JSON representation of the \&quot;teacherCandidateAcademicRecord\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putTeacherCandidateAcademicRecord(String id, TpdmTeacherCandidateAcademicRecord teacherCandidateAcademicRecord, String ifMatch) throws ApiException {
        putTeacherCandidateAcademicRecordWithHttpInfo(id, teacherCandidateAcademicRecord, ifMatch);
    }

    /**
     * Updates or creates a resource based on the resource identifier.
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param teacherCandidateAcademicRecord The JSON representation of the \&quot;teacherCandidateAcademicRecord\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putTeacherCandidateAcademicRecordWithHttpInfo(String id, TpdmTeacherCandidateAcademicRecord teacherCandidateAcademicRecord, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = putTeacherCandidateAcademicRecordCall(id, teacherCandidateAcademicRecord, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates or creates a resource based on the resource identifier. (asynchronously)
     * The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
     * @param id A resource identifier that uniquely identifies the resource. (required)
     * @param teacherCandidateAcademicRecord The JSON representation of the \&quot;teacherCandidateAcademicRecord\&quot; resource to be created or updated. (required)
     * @param ifMatch The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTeacherCandidateAcademicRecordAsync(String id, TpdmTeacherCandidateAcademicRecord teacherCandidateAcademicRecord, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTeacherCandidateAcademicRecordCall(id, teacherCandidateAcademicRecord, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
